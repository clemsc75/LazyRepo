"""
LazyRepo - Interface de D√©monstration
PROMPT 1 + 2: Structure de Base + Chat IA Assistant Configuration

Interface de pr√©sentation pure - Les fonctionnalit√©s sont simul√©es pour la d√©monstration
Aucun traitement r√©el n'est effectu√©, c'est normal et voulu.
"""

import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
import os
import random
import datetime


class OptionsManager:
    """Gestionnaire des √©quipes et agents LazyRepo pour la d√©monstration"""
    
    def __init__(self, parent_frame, app_instance=None):
        self.parent_frame = parent_frame
        self.app_instance = app_instance  # R√©f√©rence vers l'app principale pour notifications IA
        self.categories = {}
        self.setup_crews_interface()
    
    def setup_crews_interface(self):
        """Configure l'interface des 4 crews LazyRepo"""
        # Clear existing widgets
        for widget in self.parent_frame.winfo_children():
            widget.destroy()
        
        # Titre principal des crews
        title_frame = ttk.Frame(self.parent_frame)
        title_frame.pack(fill="x", padx=20, pady=15)
        
        ttk.Label(title_frame, text="üöÄ LazyRepo - Configuration des Crews IA", 
                 font=("Arial", 16, "bold")).pack(anchor="center")
        ttk.Label(title_frame, text="S√©lectionnez les √©quipes d'agents IA pour automatiser votre projet", 
                 font=("Arial", 10)).pack(pady=(5, 0), anchor="center")
        
        # D√©finition des 4 crews principaux
        crews_data = {
            "üìö Documentation Crew": {
                "README.md automatique": "G√©n√©ration de documentation compl√®te avec analyse du code source",
                "Documentation API": "Cr√©ation de docs techniques pour les API et modules",
                "Guides d'installation": "Instructions d√©taill√©es par environnement et plateforme"
            },
            "üîß Code Improvement Crew": {
                "Am√©lioration du code": "Ajout de commentaires et suggestions d'optimisation",
                "Standards de qualit√©": "Application des conventions (PEP 8, ESLint, etc.)",
                "Refactoring intelligent": "Suggestions d'am√©lioration structurelle"
            },
            "üîí Security Crew": {
                "Scan de s√©curit√©": "D√©tection de vuln√©rabilit√©s et informations sensibles",
                "Gestion des secrets": "Migration vers .env et variables d'environnement",
                "Configuration s√©curis√©e": "G√©n√©ration de .gitignore et fichiers de s√©curit√©"
            },
            "üì± Social Content Crew": {
                "Posts LinkedIn": "Contenu professionnel pour pr√©senter le projet",
                "Descriptions GitHub": "Optimisation des descriptions de d√©p√¥t",
                "Documentation marketing": "Contenu promotionnel et cas d'usage"
            }
        }
        
        # Cr√©er chaque crew
        for crew_name, agents in crews_data.items():
            self.create_crew_section(crew_name, agents)
    
    def create_crew_section(self, crew_name, agents):
        """Cr√©e une section pour une √©quipe"""
        # Frame principal de l'√©quipe
        crew_frame = ttk.LabelFrame(self.parent_frame, text=crew_name, padding=15)
        crew_frame.pack(fill="x", padx=20, pady=8, anchor="center")
        
        # Contr√¥les de l'√©quipe
        control_frame = ttk.Frame(crew_frame)
        control_frame.pack(fill="x", pady=(0, 10))
        
        # Boutons d'activation/d√©sactivation
        activate_btn = ttk.Button(control_frame, text="‚úÖ Activer toute l'√©quipe", 
                                 command=lambda: self.demo_activate_crew(crew_name, True))
        activate_btn.pack(side="left", padx=(0, 5))
        
        deactivate_btn = ttk.Button(control_frame, text="‚ùå D√©sactiver l'√©quipe", 
                                   command=lambda: self.demo_activate_crew(crew_name, False))
        deactivate_btn.pack(side="left")
        
        # Compteur d'agents actifs
        count_label = ttk.Label(control_frame, text="0/3 agent(s) actif(s)", foreground="gray")
        count_label.pack(side="right")
        
        # Stocker les informations de l'√©quipe
        self.categories[crew_name] = {
            'agents': {},
            'count_label': count_label,
            'activate_btn': activate_btn,
            'deactivate_btn': deactivate_btn
        }
        
        # Frame pour les agents
        agents_frame = ttk.Frame(crew_frame)
        agents_frame.pack(fill="x")
        
        # Cr√©er les checkboxes pour chaque agent
        for agent_name, description in agents.items():
            agent_frame = ttk.Frame(agents_frame)
            agent_frame.pack(fill="x", pady=3)
            
            var = tk.BooleanVar(value=False)
            var.trace('w', lambda *args, crew=crew_name: self.update_crew_count(crew))
            
            checkbox = ttk.Checkbutton(agent_frame, text=f"ü§ñ {agent_name}", variable=var)
            checkbox.pack(side="left")
            
            # Description de l'agent
            desc_label = ttk.Label(agent_frame, text=f"  ‚Üí {description}", 
                                  foreground="gray", font=("Arial", 9))
            desc_label.pack(side="left")
            
            self.categories[crew_name]['agents'][agent_name] = var
    
    def demo_activate_crew(self, crew_name, activate):
        """D√©monstration: Active/d√©sactive une √©quipe"""
        if crew_name in self.categories:
            for var in self.categories[crew_name]['agents'].values():
                var.set(activate)
            
            # Message de confirmation
            action = "activ√©e" if activate else "d√©sactiv√©e"
            messagebox.showinfo("D√©monstration", 
                               f"üé≠ Mode d√©monstration\n\n"
                               f"√âquipe {crew_name} {action} !\n\n"
                               f"Dans la vraie application, ceci configurerait "
                               f"les agents IA correspondants.")
    
    def update_crew_count(self, crew_name):
        """Met √† jour le compteur d'agents actifs"""
        if crew_name in self.categories:
            active_count = sum(1 for var in self.categories[crew_name]['agents'].values() if var.get())
            total_count = len(self.categories[crew_name]['agents'])
            
            self.categories[crew_name]['count_label'].config(
                text=f"{active_count}/{total_count} agent(s) actif(s)",
                foreground="green" if active_count > 0 else "gray"
            )
            
            # Notifier l'IA des changements de s√©lection
            if self.app_instance and hasattr(self.app_instance, 'notify_ai_selection_change'):
                self.app_instance.notify_ai_selection_change(crew_name, active_count > 0)
    
    def get_selected_crews(self):
        """Retourne un r√©sum√© des √©quipes s√©lectionn√©es (pour d√©monstration)"""
        selected = {}
        for crew_name, crew_data in self.categories.items():
            selected[crew_name] = {}
            for agent_name, var in crew_data['agents'].items():
                selected[crew_name][agent_name] = var.get()
        return selected


class LazyRepoDemo:
    """Interface principale de d√©monstration LazyRepo"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("LazyRepo - Interface de D√©monstration")
        self.root.geometry("1000x800")
        self.root.configure(bg="#f0f0f0")
        
        # Variables pour la d√©monstration
        self.project_name = tk.StringVar(value="Mon Projet")
        self.project_path = tk.StringVar(value="Aucun dossier s√©lectionn√©")
        self.languages_vars = {}
        
        # Variables pour le chat IA
        self.chat_history = []
        self.ai_questions_asked = set()
        self.ai_notification_cooldown = False
        
        # Variables pour l'onglet R√©sultats (PROMPT 3)
        self.analysis_progress = 0
        self.analysis_running = False
        self.demo_metrics = {}
        self.generated_files = []
        self.current_result_category = "Documentation"
        
        # Variables pour l'onglet Am√©lioration (PROMPT 4)
        self.scanned_files = []
        self.selected_files_for_improvement = []
        self.improvement_chat_history = []
        self.improvement_suggestions = []
        self.file_modifications_history = []
        
        # Variables pour l'int√©gration IA globale (PROMPT 5)
        self.global_ai_context = {}
        self.cross_tab_notifications = []
        self.smart_recommendations = []
        self.workflow_stage = "configuration"  # configuration, analysis, results, improvement
        self.ai_learning_data = {
            "user_preferences": {},
            "project_patterns": {},
            "interaction_history": []
        }
        
        # Langages support√©s (32+ langages)
        self.all_languages = [
            "Python", "JavaScript", "TypeScript", "Java", "C#", "C++", "C", 
            "Go", "Rust", "PHP", "Ruby", "Swift", "Kotlin", "Scala", 
            "R", "MATLAB", "Perl", "Shell", "PowerShell", "HTML", "CSS", 
            "SQL", "Assembly", "Objective-C", "Dart", "Lua", "Haskell", 
            "Clojure", "F#", "VB.NET", "COBOL", "Fortran", "Autre"
        ]
        
        self.setup_interface()
    
    def setup_interface(self):
        """Configure l'interface principale"""
        # Cr√©er le notebook avec 3 onglets
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Onglet 1: Configuration (principal)
        self.config_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.config_frame, text="‚öôÔ∏è Configuration des Crews")
        
        # Onglet 2: R√©sultats (d√©sactiv√© au d√©but)
        self.results_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.results_frame, text="üìä R√©sultats de l'analyse")
        self.notebook.tab(1, state="disabled")  # D√©sactiv√© au d√©but
        
        # Onglet 3: Am√©lioration (accessible)
        self.improvement_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.improvement_frame, text="üîÑ Retour & Am√©lioration")
        
        self.setup_config_tab()
        self.setup_results_tab()
        self.setup_improvement_tab()
        
        # Initialiser l'int√©gration IA globale (PROMPT 5)
        self.setup_global_ai_integration()
        self.setup_cross_tab_notifications()
        
        # Bind event pour changement d'onglet
        self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)
    
    def setup_config_tab(self):
        """Configure l'onglet Configuration avec scrolling"""
        # Cr√©er un canvas scrollable
        self.config_canvas = tk.Canvas(self.config_frame, highlightthickness=0, bg="#f0f0f0")
        self.config_scrollbar = ttk.Scrollbar(self.config_frame, orient="vertical", 
                                             command=self.config_canvas.yview)
        self.scrollable_frame = ttk.Frame(self.config_canvas)
        
        # Configuration du scrolling
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.config_canvas.configure(scrollregion=self.config_canvas.bbox("all"))
        )
        
        # Cr√©er la fen√™tre dans le canvas
        self.canvas_window = self.config_canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.config_canvas.configure(yscrollcommand=self.config_scrollbar.set)
        
        # Centrage automatique
        self.config_canvas.bind("<Configure>", self.center_content)
        
        # Pack canvas et scrollbar
        self.config_canvas.pack(side="left", fill="both", expand=True)
        self.config_scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel
        self.config_canvas.bind("<MouseWheel>", self.on_mousewheel)
        
        # Contenu de l'onglet configuration
        self.create_project_config_section()
        self.create_languages_section()
        self.create_crews_section()
        self.create_ai_chat_section()
        self.create_action_buttons()
    
    def center_content(self, event):
        """Centre le contenu dans le canvas"""
        canvas_width = event.width
        frame_width = self.scrollable_frame.winfo_reqwidth()
        
        if frame_width < canvas_width:
            x_position = (canvas_width - frame_width) // 2
        else:
            x_position = 0
        
        self.config_canvas.coords(self.canvas_window, x_position, 0)
    
    def on_mousewheel(self, event):
        """Gestion du scroll avec la molette"""
        self.config_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_project_config_section(self):
        """Cr√©e la section configuration du projet"""
        project_frame = ttk.LabelFrame(self.scrollable_frame, text="üéØ Configuration du projet", padding=15)
        project_frame.pack(fill="x", padx=20, pady=10)
        
        # Nom du projet
        ttk.Label(project_frame, text="Nom du projet:", font=("Arial", 10, "bold")).pack(anchor="w")
        name_entry = ttk.Entry(project_frame, textvariable=self.project_name, width=40, font=("Arial", 10))
        name_entry.pack(anchor="w", pady=(5, 15))
        
        # S√©lection du dossier
        folder_frame = ttk.Frame(project_frame)
        folder_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(folder_frame, text="Dossier du projet:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        path_frame = ttk.Frame(folder_frame)
        path_frame.pack(fill="x", pady=5)
        
        self.path_label = ttk.Label(path_frame, textvariable=self.project_path, 
                                   foreground="gray", font=("Arial", 9))
        self.path_label.pack(side="left", fill="x", expand=True)
        
        browse_btn = ttk.Button(path_frame, text="üìÅ Parcourir", 
                               command=self.demo_browse_folder)
        browse_btn.pack(side="right", padx=(10, 0))
    
    def create_languages_section(self):
        """Cr√©e la section d√©tection des langages"""
        languages_frame = ttk.LabelFrame(self.scrollable_frame, 
                                        text="üîç Langages de programmation", padding=15)
        languages_frame.pack(fill="x", padx=20, pady=10)
        
        # Bouton de d√©tection
        detect_frame = ttk.Frame(languages_frame)
        detect_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(detect_frame, text="D√©tection automatique des langages:", 
                 font=("Arial", 10, "bold")).pack(side="left")
        detect_btn = ttk.Button(detect_frame, text="üîç Analyser le projet", 
                               command=self.demo_detect_languages)
        detect_btn.pack(side="right")
        
        # Grille de checkboxes pour les langages
        self.languages_frame = ttk.Frame(languages_frame)
        self.languages_frame.pack(fill="x")
        
        self.setup_languages_checkboxes()
    
    def setup_languages_checkboxes(self):
        """Configure les checkboxes des langages en colonnes"""
        # Clear existing
        for widget in self.languages_frame.winfo_children():
            widget.destroy()
        
        self.languages_vars.clear()
        
        # Cr√©er en 4 colonnes
        columns = 4
        for i, language in enumerate(self.all_languages):
            row = i // columns
            col = i % columns
            
            var = tk.BooleanVar(value=False)
            self.languages_vars[language] = var
            
            checkbox = ttk.Checkbutton(self.languages_frame, text=language, variable=var)
            checkbox.grid(row=row, column=col, sticky="w", padx=15, pady=3)
        
        # Configurer les colonnes
        for col in range(columns):
            self.languages_frame.columnconfigure(col, weight=1)
    
    def create_crews_section(self):
        """Cr√©e la section des crews avec OptionsManager"""
        crews_container = ttk.Frame(self.scrollable_frame)
        crews_container.pack(fill="x", padx=0, pady=10)
        
        # Initialiser le gestionnaire d'√©quipes avec r√©f√©rence vers l'app
        self.options_manager = OptionsManager(crews_container, self)
    
    def create_ai_chat_section(self):
        """Cr√©e la section Chat IA Assistant Configuration"""
        chat_frame = ttk.LabelFrame(self.scrollable_frame, text="ü§ñ Assistant IA - Personnalisation avanc√©e", padding=15)
        chat_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Introduction du chat
        intro_frame = ttk.Frame(chat_frame)
        intro_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(intro_frame, text="üí¨ Discutez avec l'assistant IA pour personnaliser votre analyse", 
                 font=("Arial", 11, "bold")).pack(anchor="w")
        ttk.Label(intro_frame, text="L'IA adapte ses questions selon vos s√©lections d'√©quipes et de langages", 
                 foreground="gray", font=("Arial", 9)).pack(anchor="w")
        
        # Zone d'affichage du chat
        chat_display_frame = ttk.Frame(chat_frame)
        chat_display_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # Text widget avec scrollbar pour le chat
        chat_scrollbar = ttk.Scrollbar(chat_display_frame)
        chat_scrollbar.pack(side="right", fill="y")
        
        self.chat_display = tk.Text(chat_display_frame, height=12, state="disabled", 
                                   wrap=tk.WORD, bg="#f8f9fa", yscrollcommand=chat_scrollbar.set,
                                   font=("Arial", 9))
        self.chat_display.pack(side="left", fill="both", expand=True)
        chat_scrollbar.config(command=self.chat_display.yview)
        
        # Zone de saisie
        input_chat_frame = ttk.Frame(chat_frame)
        input_chat_frame.pack(fill="x")
        
        self.chat_entry = tk.Entry(input_chat_frame, font=("Arial", 10))
        self.chat_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.chat_entry.bind("<Return>", self.send_chat_message)
        
        send_chat_btn = ttk.Button(input_chat_frame, text="üí¨ Envoyer", 
                                  command=self.send_chat_message)
        send_chat_btn.pack(side="right")
        
        # Message d'accueil de l'IA
        self.add_ai_message("ü§ñ Assistant IA", 
                           "Bonjour ! Je suis l'assistant IA de LazyRepo. üöÄ\n\n"
                           "Je peux vous aider √† personnaliser votre analyse en fonction de vos besoins sp√©cifiques.\n"
                           "S√©lectionnez des √©quipes et des langages, puis je vous poserai des questions pertinentes !\n\n"
                           "üí° Tapez 'aide' pour voir ce que je peux faire.")
    
    def create_action_buttons(self):
        """Cr√©e les boutons d'action finaux"""
        action_frame = ttk.Frame(self.scrollable_frame)
        action_frame.pack(fill="x", padx=20, pady=20)
        
        # Bouton principal
        main_btn = ttk.Button(action_frame, text="üöÄ Lancer l'analyse LazyRepo", 
                             command=self.demo_start_analysis)
        main_btn.pack(side="right", padx=(10, 0))
        
        # Bouton de configuration
        config_btn = ttk.Button(action_frame, text="üëÅÔ∏è Voir la configuration", 
                               command=self.demo_show_config)
        config_btn.pack(side="right")
    
    def setup_improvement_tab(self):
        """Configure l'onglet Am√©lioration avec scanner et IA (PROMPT 4)"""
        # Canvas scrollable pour l'am√©lioration
        self.improvement_canvas = tk.Canvas(self.improvement_frame, highlightthickness=0, bg="#f0f0f0")
        self.improvement_scrollbar = ttk.Scrollbar(self.improvement_frame, orient="vertical", 
                                                  command=self.improvement_canvas.yview)
        self.improvement_scrollable_frame = ttk.Frame(self.improvement_canvas)
        
        # Configuration du scrolling
        self.improvement_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.improvement_canvas.configure(scrollregion=self.improvement_canvas.bbox("all"))
        )
        
        # Cr√©er la fen√™tre dans le canvas
        self.improvement_canvas_window = self.improvement_canvas.create_window((0, 0), 
                                                                              window=self.improvement_scrollable_frame, 
                                                                              anchor="nw")
        self.improvement_canvas.configure(yscrollcommand=self.improvement_scrollbar.set)
        
        # Centrage automatique
        self.improvement_canvas.bind("<Configure>", self.center_improvement_content)
        
        # Pack canvas et scrollbar
        self.improvement_canvas.pack(side="left", fill="both", expand=True)
        self.improvement_scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel
        self.improvement_canvas.bind("<MouseWheel>", self.on_improvement_mousewheel)
        
        # Contenu de l'onglet am√©lioration
        self.create_improvement_header()
        self.create_file_scanner_section()
        self.create_quick_actions_section()
        self.create_improvement_chat_section()
        self.create_modifications_history_section()
    
    def center_improvement_content(self, event):
        """Centre le contenu de l'am√©lioration dans le canvas"""
        canvas_width = event.width
        frame_width = self.improvement_scrollable_frame.winfo_reqwidth()
        
        if frame_width < canvas_width:
            x_position = (canvas_width - frame_width) // 2
        else:
            x_position = 0
        
        self.improvement_canvas.coords(self.improvement_canvas_window, x_position, 0)
    
    def on_improvement_mousewheel(self, event):
        """Gestion du scroll avec la molette pour l'am√©lioration"""
        self.improvement_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_improvement_header(self):
        """Cr√©e l'en-t√™te de l'onglet am√©lioration"""
        header_frame = ttk.Frame(self.improvement_scrollable_frame)
        header_frame.pack(fill="x", padx=20, pady=15)
        
        ttk.Label(header_frame, text="üîÑ Retour & Am√©lioration Continue", 
                 font=("Arial", 18, "bold")).pack(anchor="center")
        ttk.Label(header_frame, text="Scannez vos fichiers et obtenez des suggestions d'am√©lioration personnalis√©es", 
                 font=("Arial", 11), foreground="gray").pack(pady=(5, 0), anchor="center")
    
    def create_file_scanner_section(self):
        """Cr√©e la section scanner de fichiers"""
        scanner_frame = ttk.LabelFrame(self.improvement_scrollable_frame, 
                                      text="üìÅ Scanner de Fichiers du Projet", padding=15)
        scanner_frame.pack(fill="x", padx=20, pady=10)
        
        # Contr√¥les du scanner
        controls_frame = ttk.Frame(scanner_frame)
        controls_frame.pack(fill="x", pady=(0, 15))
        
        # Boutons de scan
        scan_buttons_frame = ttk.Frame(controls_frame)
        scan_buttons_frame.pack(fill="x")
        
        ttk.Button(scan_buttons_frame, text="üîç Scanner le projet", 
                  command=self.demo_scan_project).pack(side="left", padx=(0, 10))
        ttk.Button(scan_buttons_frame, text="üìÑ Scanner fichiers sp√©cifiques", 
                  command=self.demo_scan_specific_files).pack(side="left", padx=(0, 10))
        ttk.Button(scan_buttons_frame, text="üîÑ Actualiser", 
                  command=self.demo_refresh_scan).pack(side="left")
        
        # Filtres
        filters_frame = ttk.Frame(controls_frame)
        filters_frame.pack(fill="x", pady=(10, 0))
        
        ttk.Label(filters_frame, text="Filtres:", font=("Arial", 10, "bold")).pack(side="left")
        
        # Filtre par type de fichier
        self.file_type_filter = tk.StringVar(value="Tous")
        file_types = ["Tous", "Python (.py)", "JavaScript (.js)", "HTML (.html)", "CSS (.css)", "Markdown (.md)", "JSON (.json)"]
        filter_combo = ttk.Combobox(filters_frame, textvariable=self.file_type_filter, 
                                   values=file_types, state="readonly", width=15)
        filter_combo.pack(side="left", padx=(10, 10))
        filter_combo.bind("<<ComboboxSelected>>", self.apply_file_filters)
        
        # Filtre par taille
        ttk.Label(filters_frame, text="Taille max:", font=("Arial", 9)).pack(side="left")
        self.size_filter = tk.StringVar(value="Toutes")
        size_options = ["Toutes", "< 1KB", "< 10KB", "< 100KB", "< 1MB"]
        size_combo = ttk.Combobox(filters_frame, textvariable=self.size_filter, 
                                 values=size_options, state="readonly", width=10)
        size_combo.pack(side="left", padx=(5, 0))
        size_combo.bind("<<ComboboxSelected>>", self.apply_file_filters)
        
        # Liste des fichiers scann√©s
        files_list_frame = ttk.Frame(scanner_frame)
        files_list_frame.pack(fill="both", expand=True)
        
        # En-t√™te de la liste
        list_header_frame = ttk.Frame(files_list_frame)
        list_header_frame.pack(fill="x", pady=(0, 5))
        
        ttk.Label(list_header_frame, text="Fichiers d√©tect√©s:", 
                 font=("Arial", 10, "bold")).pack(side="left")
        self.files_count_label = ttk.Label(list_header_frame, text="0 fichier(s)", 
                                          foreground="gray", font=("Arial", 9))
        self.files_count_label.pack(side="right")
        
        # Treeview pour afficher les fichiers avec colonnes
        tree_frame = ttk.Frame(files_list_frame)
        tree_frame.pack(fill="both", expand=True)
        
        # Scrollbars pour le Treeview
        tree_v_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical")
        tree_v_scrollbar.pack(side="right", fill="y")
        
        tree_h_scrollbar = ttk.Scrollbar(tree_frame, orient="horizontal")
        tree_h_scrollbar.pack(side="bottom", fill="x")
        
        # Treeview avec colonnes
        columns = ("nom", "type", "taille", "modification", "statut")
        self.files_tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=8,
                                      yscrollcommand=tree_v_scrollbar.set,
                                      xscrollcommand=tree_h_scrollbar.set)
        
        # Configuration des colonnes
        self.files_tree.heading("nom", text="üìÑ Nom du fichier")
        self.files_tree.heading("type", text="üè∑Ô∏è Type")
        self.files_tree.heading("taille", text="üìè Taille")
        self.files_tree.heading("modification", text="üìÖ Modifi√©")
        self.files_tree.heading("statut", text="üîç Statut")
        
        self.files_tree.column("nom", width=250)
        self.files_tree.column("type", width=80)
        self.files_tree.column("taille", width=80)
        self.files_tree.column("modification", width=120)
        self.files_tree.column("statut", width=100)
        
        self.files_tree.pack(side="left", fill="both", expand=True)
        
        tree_v_scrollbar.config(command=self.files_tree.yview)
        tree_h_scrollbar.config(command=self.files_tree.xview)
        
        # Bind events
        self.files_tree.bind("<Double-1>", self.on_file_double_click)
        self.files_tree.bind("<Button-3>", self.show_file_context_menu)  # Clic droit
    
    def create_quick_actions_section(self):
        """Cr√©e la section actions rapides"""
        actions_frame = ttk.LabelFrame(self.improvement_scrollable_frame, 
                                      text="‚ö° Actions Rapides", padding=15)
        actions_frame.pack(fill="x", padx=20, pady=10)
        
        # S√©lection de fichiers
        selection_frame = ttk.Frame(actions_frame)
        selection_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(selection_frame, text="Fichiers s√©lectionn√©s:", 
                 font=("Arial", 10, "bold")).pack(side="left")
        self.selected_files_label = ttk.Label(selection_frame, text="Aucun fichier s√©lectionn√©", 
                                             foreground="gray", font=("Arial", 9))
        self.selected_files_label.pack(side="left", padx=(10, 0))
        
        ttk.Button(selection_frame, text="‚úÖ S√©lectionner tout", 
                  command=self.select_all_files).pack(side="right", padx=(10, 0))
        ttk.Button(selection_frame, text="‚ùå D√©s√©lectionner tout", 
                  command=self.deselect_all_files).pack(side="right")
        
        # Actions disponibles
        actions_grid_frame = ttk.Frame(actions_frame)
        actions_grid_frame.pack(fill="x", pady=10)
        
        # Premi√®re rang√©e d'actions
        row1_frame = ttk.Frame(actions_grid_frame)
        row1_frame.pack(fill="x", pady=(0, 8))
        
        ttk.Button(row1_frame, text="üìù Ajouter commentaires", 
                  command=lambda: self.demo_quick_action("comments")).pack(side="left", padx=(0, 10))
        ttk.Button(row1_frame, text="üîí S√©curiser les secrets", 
                  command=lambda: self.demo_quick_action("security")).pack(side="left", padx=(0, 10))
        ttk.Button(row1_frame, text="üìö G√©n√©rer docstrings", 
                  command=lambda: self.demo_quick_action("docstrings")).pack(side="left", padx=(0, 10))
        
        # Deuxi√®me rang√©e d'actions
        row2_frame = ttk.Frame(actions_grid_frame)
        row2_frame.pack(fill="x", pady=(0, 8))
        
        ttk.Button(row2_frame, text="üé® Formater le code", 
                  command=lambda: self.demo_quick_action("format")).pack(side="left", padx=(0, 10))
        ttk.Button(row2_frame, text="üêõ D√©tecter les bugs", 
                  command=lambda: self.demo_quick_action("bugs")).pack(side="left", padx=(0, 10))
        ttk.Button(row2_frame, text="‚ö° Optimiser performance", 
                  command=lambda: self.demo_quick_action("optimize")).pack(side="left", padx=(0, 10))
        
        # Troisi√®me rang√©e d'actions
        row3_frame = ttk.Frame(actions_grid_frame)
        row3_frame.pack(fill="x")
        
        ttk.Button(row3_frame, text="üß™ G√©n√©rer tests", 
                  command=lambda: self.demo_quick_action("tests")).pack(side="left", padx=(0, 10))
        ttk.Button(row3_frame, text="üìã Analyser complexit√©", 
                  command=lambda: self.demo_quick_action("complexity")).pack(side="left", padx=(0, 10))
        ttk.Button(row3_frame, text="üîÑ Refactoring", 
                  command=lambda: self.demo_quick_action("refactor")).pack(side="left", padx=(0, 10))
    
    def create_improvement_chat_section(self):
        """Cr√©e la section chat IA d'am√©lioration"""
        chat_frame = ttk.LabelFrame(self.improvement_scrollable_frame, 
                                   text="ü§ñ Assistant IA - Am√©lioration Sp√©cialis√©e", padding=15)
        chat_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Introduction sp√©cialis√©e
        intro_frame = ttk.Frame(chat_frame)
        intro_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(intro_frame, text="üí¨ Chat sp√©cialis√© dans l'am√©lioration et l'optimisation de code", 
                 font=("Arial", 11, "bold")).pack(anchor="w")
        ttk.Label(intro_frame, text="Posez des questions sur vos fichiers, demandez des suggestions d'am√©lioration sp√©cifiques", 
                 foreground="gray", font=("Arial", 9)).pack(anchor="w")
        
        # Zone d'affichage du chat d'am√©lioration
        improvement_chat_display_frame = ttk.Frame(chat_frame)
        improvement_chat_display_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        # Text widget avec scrollbar pour le chat d'am√©lioration
        improvement_chat_scrollbar = ttk.Scrollbar(improvement_chat_display_frame)
        improvement_chat_scrollbar.pack(side="right", fill="y")
        
        self.improvement_chat_display = tk.Text(improvement_chat_display_frame, height=10, state="disabled", 
                                               wrap=tk.WORD, bg="#f8f9fa", yscrollcommand=improvement_chat_scrollbar.set,
                                               font=("Arial", 9))
        self.improvement_chat_display.pack(side="left", fill="both", expand=True)
        improvement_chat_scrollbar.config(command=self.improvement_chat_display.yview)
        
        # Zone de saisie pour l'am√©lioration
        input_improvement_chat_frame = ttk.Frame(chat_frame)
        input_improvement_chat_frame.pack(fill="x")
        
        self.improvement_chat_entry = tk.Entry(input_improvement_chat_frame, font=("Arial", 10))
        self.improvement_chat_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.improvement_chat_entry.bind("<Return>", self.send_improvement_chat_message)
        
        send_improvement_btn = ttk.Button(input_improvement_chat_frame, text="üí¨ Demander am√©lioration", 
                                         command=self.send_improvement_chat_message)
        send_improvement_btn.pack(side="right")
        
        # Message d'accueil sp√©cialis√©
        self.add_improvement_chat_message("ü§ñ Assistant Am√©lioration", 
                                         "Bonjour ! Je suis l'assistant IA sp√©cialis√© en am√©lioration de code. üîß\n\n"
                                         "Je peux vous aider √† :\n"
                                         "‚Ä¢ üìù Analyser la qualit√© de votre code\n"
                                         "‚Ä¢ üêõ D√©tecter les probl√®mes potentiels\n"
                                         "‚Ä¢ ‚ö° Sugg√©rer des optimisations\n"
                                         "‚Ä¢ üß™ Proposer des tests\n"
                                         "‚Ä¢ üìö Am√©liorer la documentation\n\n"
                                         "Scannez d'abord vos fichiers, puis posez-moi vos questions !")
        
        # ============ ASSISTANT CUSTOMER SERVICE/SAV (PROMPT 6) ============
        self.create_customer_service_chat_section()
    
    def create_customer_service_chat_section(self):
        """Cr√©e la section Assistant Customer Service/SAV (PROMPT 6)"""
        # Section Assistant Customer Service
        cs_chat_frame = ttk.LabelFrame(self.improvement_scrollable_frame, 
                                      text="üéß Assistant Customer Service - SAV Personnalisation", padding=15)
        cs_chat_frame.pack(fill="x", padx=20, pady=(15, 10))
        
        # Description du service
        cs_description = ttk.Label(cs_chat_frame, 
                                  text="Assistant sp√©cialis√© dans la personnalisation et l'ajustement des modifications g√©n√©r√©es",
                                  font=("Arial", 9), foreground="#374151")
        cs_description.pack(anchor="w", pady=(0, 10))
        
        # Zone d'affichage du chat Customer Service
        cs_chat_display_frame = ttk.Frame(cs_chat_frame)
        cs_chat_display_frame.pack(fill="both", expand=True, pady=(0, 10))
        
        cs_chat_scrollbar = ttk.Scrollbar(cs_chat_display_frame)
        cs_chat_scrollbar.pack(side="right", fill="y")
        
        self.cs_chat_display = tk.Text(cs_chat_display_frame, height=8, state="disabled", 
                                      wrap=tk.WORD, bg="#f0f9ff", yscrollcommand=cs_chat_scrollbar.set,
                                      font=("Arial", 9), relief="solid", borderwidth=1)
        self.cs_chat_display.pack(side="left", fill="both", expand=True)
        cs_chat_scrollbar.config(command=self.cs_chat_display.yview)
        
        # Zone de saisie pour Customer Service
        input_cs_chat_frame = ttk.Frame(cs_chat_frame)
        input_cs_chat_frame.pack(fill="x")
        
        self.cs_chat_entry = tk.Entry(input_cs_chat_frame, font=("Arial", 10))
        self.cs_chat_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.cs_chat_entry.bind("<Return>", self.send_cs_chat_message)
        
        send_cs_btn = ttk.Button(input_cs_chat_frame, text="üéß Demander personnalisation", 
                                command=self.send_cs_chat_message)
        send_cs_btn.pack(side="right")
        
        # Boutons d'actions rapides Customer Service
        cs_quick_actions_frame = ttk.Frame(cs_chat_frame)
        cs_quick_actions_frame.pack(fill="x", pady=(10, 0))
        
        ttk.Label(cs_quick_actions_frame, text="Actions rapides :", 
                 font=("Arial", 9, "bold")).pack(side="left", padx=(0, 10))
        
        cs_quick_buttons = [
            ("üîß Ajuster r√©sultat", lambda: self.cs_quick_action("adjust")),
            ("üìù Modifier style", lambda: self.cs_quick_action("style")),
            ("üéØ Personnaliser", lambda: self.cs_quick_action("customize")),
            ("üîÑ Refaire", lambda: self.cs_quick_action("redo")),
            ("üíæ Sauvegarder pr√©f√©rences", lambda: self.cs_quick_action("save_prefs"))
        ]
        
        for button_text, button_command in cs_quick_buttons:
            btn = ttk.Button(cs_quick_actions_frame, text=button_text, command=button_command)
            btn.pack(side="left", padx=2)
        
        # Message d'accueil Customer Service
        self.add_cs_chat_message("üéß Agent SAV", 
                                "Bienvenue au service personnalisation LazyRepo ! üëã\n\n"
                                "Je suis votre agent SAV d√©di√© aux ajustements post-g√©n√©ration.\n\n"
                                "üéØ Je peux vous aider √† :\n"
                                "‚Ä¢ Modifier le style des fichiers g√©n√©r√©s\n"
                                "‚Ä¢ Ajuster les param√®tres selon vos pr√©f√©rences\n"
                                "‚Ä¢ Personnaliser les templates utilis√©s\n"
                                "‚Ä¢ Corriger des √©l√©ments sp√©cifiques\n"
                                "‚Ä¢ Sauvegarder vos pr√©f√©rences pour les prochaines analyses\n\n"
                                "üí° D√©crivez-moi ce que vous souhaitez modifier ou utilisez les actions rapides !")
    
    def add_cs_chat_message(self, sender, message):
        """Ajoute un message au chat Customer Service"""
        self.cs_chat_display.config(state="normal")
        
        # Ajouter timestamp
        timestamp = datetime.datetime.now().strftime("%H:%M")
        
        # Ajouter le message avec styles diff√©rents
        if sender == "üéß Agent SAV":
            self.cs_chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "cs_sender")
            self.cs_chat_display.insert(tk.END, f"{message}\n\n", "cs_message")
        else:
            self.cs_chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "cs_user_sender")
            self.cs_chat_display.insert(tk.END, f"{message}\n\n", "cs_user_message")
        
        # Configurer les tags pour le style Customer Service
        self.cs_chat_display.tag_configure("cs_sender", foreground="#7c3aed", font=("Arial", 9, "bold"))
        self.cs_chat_display.tag_configure("cs_message", foreground="#1f2937")
        self.cs_chat_display.tag_configure("cs_user_sender", foreground="#059669", font=("Arial", 9, "bold"))
        self.cs_chat_display.tag_configure("cs_user_message", foreground="#374151")
        
        self.cs_chat_display.config(state="disabled")
        self.cs_chat_display.see(tk.END)
    
    def send_cs_chat_message(self, event=None):
        """Envoie un message dans le chat Customer Service"""
        message = self.cs_chat_entry.get().strip()
        if not message:
            return
        
        # Ajouter le message de l'utilisateur
        self.add_cs_chat_message("üë§ Vous", message)
        self.cs_chat_entry.delete(0, tk.END)
        
        # G√©n√©rer la r√©ponse du SAV avec d√©lai
        self.root.after(700, lambda: self.generate_cs_ai_response(message))
    
    def generate_cs_ai_response(self, user_message):
        """G√©n√®re une r√©ponse de l'agent Customer Service SAV"""
        user_message_lower = user_message.lower()
        
        # V√©rifier le contexte des modifications
        has_modifications = hasattr(self, 'generated_files') and self.generated_files
        has_analysis = hasattr(self, 'analysis_progress') and self.analysis_progress > 0
        
        # R√©ponses sp√©cialis√©es Customer Service/SAV
        if any(word in user_message_lower for word in ["aide", "help", "que peux-tu faire"]):
            response = ("üéß Service Client LazyRepo √† votre disposition !\n\n"
                       "Je suis sp√©cialis√© dans la personnalisation post-g√©n√©ration :\n\n"
                       "üîß AJUSTEMENTS TECHNIQUES :\n"
                       "‚Ä¢ Modifier les styles de code g√©n√©r√©s\n"
                       "‚Ä¢ Changer les formats de documentation\n"
                       "‚Ä¢ Ajuster les conventions de nommage\n\n"
                       "üé® PERSONNALISATION :\n"
                       "‚Ä¢ Adapter les templates √† vos besoins\n"
                       "‚Ä¢ Modifier les commentaires automatiques\n"
                       "‚Ä¢ Personnaliser les structures de fichiers\n\n"
                       "üíæ PR√âF√âRENCES :\n"
                       "‚Ä¢ Sauvegarder vos choix pour les prochaines fois\n"
                       "‚Ä¢ Cr√©er des profils personnalis√©s\n"
                       "‚Ä¢ Exporter vos configurations\n\n"
                       "Que souhaitez-vous personnaliser aujourd'hui ?")
        
        elif any(word in user_message_lower for word in ["style", "format", "pr√©sentation"]):
            if not has_modifications:
                response = ("üé® Excellent ! Parlons de personnalisation de style.\n\n"
                           "Pour personnaliser le style, je dois d'abord analyser ce qui a √©t√© g√©n√©r√©.\n\n"
                           "üìã √âTAPES RECOMMAND√âES :\n"
                           "1. Lancez une analyse depuis l'onglet Configuration\n"
                           "2. Consultez les r√©sultats g√©n√©r√©s\n"
                           "3. Revenez ici pour personnaliser le style\n\n"
                           "üéØ STYLES DISPONIBLES :\n"
                           "‚Ä¢ Style corporate (formel)\n"
                           "‚Ä¢ Style moderne (√©pur√©)\n"
                           "‚Ä¢ Style d√©veloppeur (technique)\n"
                           "‚Ä¢ Style startup (innovant)\n\n"
                           "Quel style pr√©f√©rez-vous ?")
            else:
                response = ("üé® Parfait ! Je vois que vous avez des fichiers g√©n√©r√©s.\n\n"
                           "üìä ANALYSE DU STYLE ACTUEL :\n"
                           "‚Ä¢ Documentation : Style technique d√©taill√©\n"
                           "‚Ä¢ Commentaires : Format standard\n"
                           "‚Ä¢ Structure : Organisation classique\n\n"
                           "üîÑ MODIFICATIONS POSSIBLES :\n"
                           "‚Ä¢ Plus concis ‚Üí R√©duire la verbosit√©\n"
                           "‚Ä¢ Plus formel ‚Üí Ajouter du contexte business\n"
                           "‚Ä¢ Plus moderne ‚Üí Utiliser des emojis et sections\n"
                           "‚Ä¢ Plus technique ‚Üí Ajouter des d√©tails d'impl√©mentation\n\n"
                           "Quel ajustement souhaitez-vous appliquer ?")
        
        elif any(word in user_message_lower for word in ["modifier", "changer", "ajuster"]):
            response = ("üîß Je comprends que vous voulez modifier quelque chose !\n\n"
                       "üí° √âL√âMENTS MODIFIABLES :\n\n"
                       "üìù CONTENU :\n"
                       "‚Ä¢ Titre et descriptions des fichiers\n"
                       "‚Ä¢ Commentaires et documentation\n"
                       "‚Ä¢ Structure des dossiers\n\n"
                       "üé® APPARENCE :\n"
                       "‚Ä¢ Format des fichiers (Markdown, HTML, etc.)\n"
                       "‚Ä¢ Style des commentaires de code\n"
                       "‚Ä¢ Organisation des sections\n\n"
                       "‚öôÔ∏è CONFIGURATION :\n"
                       "‚Ä¢ Langue des commentaires (FR/EN)\n"
                       "‚Ä¢ Niveau de d√©tail (basique/avanc√©)\n"
                       "‚Ä¢ Templates personnalis√©s\n\n"
                       "Pouvez-vous me dire pr√©cis√©ment ce que vous souhaitez modifier ?")
        
        elif any(word in user_message_lower for word in ["pr√©f√©rence", "sauvegarder", "profil"]):
            response = ("üíæ Excellente id√©e ! La sauvegarde de pr√©f√©rences personnalis√©es.\n\n"
                       "üéØ PROFILS DISPONIBLES :\n\n"
                       "üëî PROFIL ENTREPRISE :\n"
                       "‚Ä¢ Documentation formelle\n"
                       "‚Ä¢ Commentaires d√©taill√©s\n"
                       "‚Ä¢ Structure hi√©rarchique\n\n"
                       "üöÄ PROFIL STARTUP :\n"
                       "‚Ä¢ Style moderne et agile\n"
                       "‚Ä¢ Documentation concise\n"
                       "‚Ä¢ Focus sur l'innovation\n\n"
                       "üíª PROFIL D√âVELOPPEUR :\n"
                       "‚Ä¢ Commentaires techniques\n"
                       "‚Ä¢ Documentation code-first\n"
                       "‚Ä¢ Exemples pratiques\n\n"
                       "üìã PROFIL PERSONNALIS√â :\n"
                       "‚Ä¢ Vos propres pr√©f√©rences\n"
                       "‚Ä¢ Templates sur mesure\n"
                       "‚Ä¢ Configuration sauvegard√©e\n\n"
                       "Quel profil vous int√©resse ?")
        
        elif any(word in user_message_lower for word in ["probl√®me", "erreur", "bug", "ne marche pas"]):
            response = ("üîß Service technique LazyRepo - Je vais vous aider !\n\n"
                       "üö® DIAGNOSTIC RAPIDE :\n"
                       "D√©crivez-moi le probl√®me rencontr√© :\n\n"
                       "‚ùì QUESTIONS DE DIAGNOSTIC :\n"
                       "‚Ä¢ √Ä quelle √©tape cela se produit-il ?\n"
                       "‚Ä¢ Quel √©tait le r√©sultat attendu ?\n"
                       "‚Ä¢ Y a-t-il un message d'erreur ?\n\n"
                       "üõ†Ô∏è SOLUTIONS COURANTES :\n"
                       "‚Ä¢ Relancer l'analyse avec d'autres param√®tres\n"
                       "‚Ä¢ V√©rifier la configuration des √©quipes\n"
                       "‚Ä¢ R√©initialiser et recommencer\n\n"
                       "üéß SUPPORT AVANC√â :\n"
                       "‚Ä¢ Analyse des logs d√©taill√©e\n"
                       "‚Ä¢ Configuration personnalis√©e\n"
                       "‚Ä¢ Assistance en temps r√©el\n\n"
                       "D√©taillez-moi votre probl√®me, je vais le r√©soudre !")
        
        elif any(word in user_message_lower for word in ["recommandation", "conseil", "suggestion"]):
            if has_analysis:
                response = ("üí° Recommandations personnalis√©es bas√©es sur votre projet :\n\n"
                           "üìä ANALYSE DE VOTRE PROJET :\n"
                           "‚Ä¢ Complexit√© d√©tect√©e : Moyenne √† √©lev√©e\n"
                           "‚Ä¢ Langages principaux identifi√©s\n"
                           "‚Ä¢ Style actuel : Technique standard\n\n"
                           "üéØ MES RECOMMANDATIONS :\n\n"
                           "1. üìö DOCUMENTATION :\n"
                           "   ‚Üí Ajouter plus d'exemples pratiques\n"
                           "   ‚Üí Cr√©er un guide de d√©marrage rapide\n\n"
                           "2. üé® STYLE :\n"
                           "   ‚Üí Adopter un ton plus accessible\n"
                           "   ‚Üí Ajouter des visuels (diagrammes)\n\n"
                           "3. üîß STRUCTURE :\n"
                           "   ‚Üí R√©organiser par niveau de difficult√©\n"
                           "   ‚Üí Ajouter une section FAQ\n\n"
                           "Quelle recommandation vous int√©resse le plus ?")
            else:
                response = ("üí° Je serais ravi de vous donner des recommandations !\n\n"
                           "Pour des conseils personnalis√©s, lancez d'abord une analyse.\n\n"
                           "üéØ RECOMMANDATIONS G√âN√âRALES :\n\n"
                           "üöÄ POUR D√âBUTER :\n"
                           "‚Ä¢ Commencez par l'√©quipe Documentation\n"
                           "‚Ä¢ Ajoutez votre langage principal\n"
                           "‚Ä¢ Testez avec un petit projet\n\n"
                           "üìà POUR OPTIMISER :\n"
                           "‚Ä¢ Activez plusieurs √©quipes compl√©mentaires\n"
                           "‚Ä¢ Sauvegardez vos pr√©f√©rences\n"
                           "‚Ä¢ Utilisez les actions rapides\n\n"
                           "üé® POUR PERSONNALISER :\n"
                           "‚Ä¢ D√©finissez votre style pr√©f√©r√©\n"
                           "‚Ä¢ Cr√©ez des templates personnalis√©s\n"
                           "‚Ä¢ Configurez vos profils\n\n"
                           "Que souhaitez-vous optimiser en priorit√© ?")
        
        else:
            # R√©ponse contextuelle par d√©faut
            context_responses = [
                ("üéß Je suis l√† pour vous aider avec la personnalisation !\n\n"
                 "Pouvez-vous √™tre plus sp√©cifique sur ce que vous souhaitez ajuster ?\n\n"
                 "Par exemple :\n"
                 "‚Ä¢ 'Modifier le style de documentation'\n"
                 "‚Ä¢ 'Changer le format des commentaires'\n"
                 "‚Ä¢ 'Personnaliser les templates'\n"
                 "‚Ä¢ 'Sauvegarder mes pr√©f√©rences'\n\n"
                 "Je suis sp√©cialis√© dans l'ajustement fin de vos r√©sultats ! üîß"),
                
                ("ü§î Int√©ressant ! Pour mieux vous aider, pourriez-vous pr√©ciser :\n\n"
                 "üéØ QUE VOULEZ-VOUS PERSONNALISER ?\n"
                 "‚Ä¢ Le contenu g√©n√©r√© ?\n"
                 "‚Ä¢ Le style d'√©criture ?\n"
                 "‚Ä¢ La structure des fichiers ?\n"
                 "‚Ä¢ Les param√®tres de g√©n√©ration ?\n\n"
                 "Plus vous serez pr√©cis, mieux je pourrai vous assister ! üéß"),
                
                ("üí° Service Client LazyRepo - Je vous √©coute !\n\n"
                 "Votre demande m'int√©resse. Pour vous proposer la meilleure solution :\n\n"
                 "üìã D√âCRIVEZ-MOI :\n"
                 "‚Ä¢ Ce qui ne vous convient pas actuellement\n"
                 "‚Ä¢ Le r√©sultat que vous souhaitez obtenir\n"
                 "‚Ä¢ Vos pr√©f√©rences de style/format\n\n"
                 "üöÄ ENSEMBLE, nous trouverons la personnalisation parfaite ! üéØ")
            ]
            
            response = random.choice(context_responses)
        
        self.add_cs_chat_message("üéß Agent SAV", response)
    
    def cs_quick_action(self, action_type):
        """Ex√©cute une action rapide Customer Service"""
        action_messages = {
            "adjust": {
                "title": "üîß Ajustement des R√©sultats",
                "message": ("Ajustement des r√©sultats en cours...\n\n"
                           "üìä √âL√âMENTS AJUST√âS :\n"
                           "‚Ä¢ Style de documentation : Plus concis\n"
                           "‚Ä¢ Format des commentaires : Modernis√©\n"
                           "‚Ä¢ Structure des fichiers : Optimis√©e\n\n"
                           "‚úÖ Ajustements appliqu√©s avec succ√®s !\n"
                           "Consultez vos fichiers pour voir les modifications.")
            },
            "style": {
                "title": "üìù Modification du Style",
                "message": ("Personnalisation du style en cours...\n\n"
                           "üé® CHANGEMENTS APPLIQU√âS :\n"
                           "‚Ä¢ Tone : Plus professionnel\n"
                           "‚Ä¢ Format : Style moderne avec emojis\n"
                           "‚Ä¢ Organisation : Sections mieux d√©finies\n"
                           "‚Ä¢ Lisibilit√© : Am√©lior√©e\n\n"
                           "‚ú® Votre style personnalis√© est maintenant actif !")
            },
            "customize": {
                "title": "üéØ Personnalisation Avanc√©e",
                "message": ("Lancement de la personnalisation avanc√©e...\n\n"
                           "‚öôÔ∏è OPTIONS DISPONIBLES :\n"
                           "‚Ä¢ Templates personnalis√©s : Activ√©s\n"
                           "‚Ä¢ Pr√©f√©rences utilisateur : Charg√©es\n"
                           "‚Ä¢ Configuration sur mesure : Appliqu√©e\n"
                           "‚Ä¢ Profil adaptatif : Configur√©\n\n"
                           "üöÄ Votre environnement est maintenant enti√®rement personnalis√© !")
            },
            "redo": {
                "title": "üîÑ R√©g√©n√©ration Personnalis√©e",
                "message": ("R√©g√©n√©ration avec vos pr√©f√©rences...\n\n"
                           "üîÑ PROCESSUS EN COURS :\n"
                           "‚Ä¢ Application de vos pr√©f√©rences sauvegard√©es\n"
                           "‚Ä¢ R√©g√©n√©ration avec le style personnalis√©\n"
                           "‚Ä¢ Int√©gration des ajustements pr√©c√©dents\n"
                           "‚Ä¢ Optimisation selon votre profil\n\n"
                           "‚è±Ô∏è Estimation : 30 secondes...\n"
                           "‚úÖ R√©g√©n√©ration termin√©e avec vos personnalisations !")
            },
            "save_prefs": {
                "title": "üíæ Sauvegarde des Pr√©f√©rences",
                "message": ("Sauvegarde de vos pr√©f√©rences personnalis√©es...\n\n"
                           "üíæ √âL√âMENTS SAUVEGARD√âS :\n"
                           "‚Ä¢ Style de documentation pr√©f√©r√©\n"
                           "‚Ä¢ Format des commentaires personnalis√©\n"
                           "‚Ä¢ Organisation des fichiers optimis√©e\n"
                           "‚Ä¢ Profil utilisateur complet\n"
                           "‚Ä¢ Templates sur mesure\n\n"
                           "‚úÖ Profil personnalis√© sauvegard√© !\n"
                           "Vos pr√©f√©rences seront appliqu√©es automatiquement lors des prochaines analyses.")
            }
        }
        
        action_info = action_messages.get(action_type, {
            "title": "Action Customer Service",
            "message": "Action ex√©cut√©e avec succ√®s !"
        })
        
        # Afficher le message dans le chat
        self.add_cs_chat_message("üéß Agent SAV", 
                                f"{action_info['title']}\n\n{action_info['message']}")
        
        # Notification globale
        self.show_notification(
            f"‚úÖ {action_info['title']} - Action termin√©e avec succ√®s !",
            duration=4000
        )
        
        # Ajouter √† l'historique des modifications
        timestamp = datetime.datetime.now().strftime("%H:%M")
        modification_entry = f"[{timestamp}] Customer Service - {action_info['title']}"
        
        if hasattr(self, 'modifications_listbox'):
            if self.modifications_listbox.size() == 1 and "Aucune modification" in self.modifications_listbox.get(0):
                self.modifications_listbox.delete(0)
                self.modifications_listbox.config(foreground="black")
            
            self.modifications_listbox.insert(0, modification_entry)
            
            # Limiter l'historique √† 20 entr√©es
            if self.modifications_listbox.size() > 20:
                self.modifications_listbox.delete(20, tk.END)
    
    def create_modifications_history_section(self):
        """Cr√©e la section historique des modifications"""
        history_frame = ttk.LabelFrame(self.improvement_scrollable_frame, 
                                      text="üìã Historique des Modifications", padding=15)
        history_frame.pack(fill="x", padx=20, pady=(10, 20))
        
        # En-t√™te de l'historique
        history_header_frame = ttk.Frame(history_frame)
        history_header_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(history_header_frame, text="Derni√®res modifications sugg√©r√©es:", 
                 font=("Arial", 10, "bold")).pack(side="left")
        ttk.Button(history_header_frame, text="üóëÔ∏è Vider l'historique", 
                  command=self.clear_modifications_history).pack(side="right")
        
        # Liste des modifications
        modifications_list_frame = ttk.Frame(history_frame)
        modifications_list_frame.pack(fill="both", expand=True)
        
        # Scrollbar pour l'historique
        history_scrollbar = ttk.Scrollbar(modifications_list_frame)
        history_scrollbar.pack(side="right", fill="y")
        
        # Listbox pour l'historique
        self.modifications_listbox = tk.Listbox(modifications_list_frame, height=6,
                                               yscrollcommand=history_scrollbar.set,
                                               font=("Arial", 9))
        self.modifications_listbox.pack(side="left", fill="both", expand=True)
        history_scrollbar.config(command=self.modifications_listbox.yview)
        
        self.modifications_listbox.bind("<Double-Button-1>", self.view_modification_details)
        
        # Placeholder initial
        self.modifications_listbox.insert(0, "üìù Aucune modification effectu√©e pour le moment")
        self.modifications_listbox.config(foreground="gray")
    
    def setup_results_tab(self):
        """Configure l'onglet R√©sultats avec simulation et m√©triques (PROMPT 3)"""
        # Canvas scrollable pour les r√©sultats
        self.results_canvas = tk.Canvas(self.results_frame, highlightthickness=0, bg="#f0f0f0")
        self.results_scrollbar = ttk.Scrollbar(self.results_frame, orient="vertical", 
                                              command=self.results_canvas.yview)
        self.results_scrollable_frame = ttk.Frame(self.results_canvas)
        
        # Configuration du scrolling
        self.results_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.results_canvas.configure(scrollregion=self.results_canvas.bbox("all"))
        )
        
        # Cr√©er la fen√™tre dans le canvas
        self.results_canvas_window = self.results_canvas.create_window((0, 0), 
                                                                      window=self.results_scrollable_frame, 
                                                                      anchor="nw")
        self.results_canvas.configure(yscrollcommand=self.results_scrollbar.set)
        
        # Centrage automatique
        self.results_canvas.bind("<Configure>", self.center_results_content)
        
        # Pack canvas et scrollbar
        self.results_canvas.pack(side="left", fill="both", expand=True)
        self.results_scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel
        self.results_canvas.bind("<MouseWheel>", self.on_results_mousewheel)
        
        # Contenu de l'onglet r√©sultats
        self.create_analysis_header()
        self.create_progress_section()
        self.create_metrics_section()
        self.create_results_navigation()
        self.create_generated_files_section()
        self.create_results_actions()
    
    def center_results_content(self, event):
        """Centre le contenu des r√©sultats dans le canvas"""
        canvas_width = event.width
        frame_width = self.results_scrollable_frame.winfo_reqwidth()
        
        if frame_width < canvas_width:
            x_position = (canvas_width - frame_width) // 2
        else:
            x_position = 0
        
        self.results_canvas.coords(self.results_canvas_window, x_position, 0)
    
    def on_results_mousewheel(self, event):
        """Gestion du scroll avec la molette pour les r√©sultats"""
        self.results_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    def create_analysis_header(self):
        """Cr√©e l'en-t√™te de l'analyse"""
        header_frame = ttk.Frame(self.results_scrollable_frame)
        header_frame.pack(fill="x", padx=20, pady=15)
        
        ttk.Label(header_frame, text="üìä R√©sultats de l'Analyse LazyRepo", 
                 font=("Arial", 18, "bold")).pack(anchor="center")
        
        # Informations du projet
        self.project_info_frame = ttk.Frame(header_frame)
        self.project_info_frame.pack(pady=10)
        
        self.project_info_label = ttk.Label(self.project_info_frame, 
                                           text="Projet non analys√©", 
                                           font=("Arial", 11), foreground="gray")
        self.project_info_label.pack()
    
    def create_progress_section(self):
        """Cr√©e la section de progression de l'analyse"""
        progress_frame = ttk.LabelFrame(self.results_scrollable_frame, 
                                       text="üîÑ Progression de l'analyse", padding=15)
        progress_frame.pack(fill="x", padx=20, pady=10)
        
        # Barre de progression
        progress_container = ttk.Frame(progress_frame)
        progress_container.pack(fill="x", pady=(0, 10))
        
        ttk.Label(progress_container, text="Progression globale:", 
                 font=("Arial", 10, "bold")).pack(anchor="w")
        
        self.progress_bar = ttk.Progressbar(progress_container, mode='determinate', length=400)
        self.progress_bar.pack(fill="x", pady=5)
        
        self.progress_label = ttk.Label(progress_container, text="0% - En attente de d√©marrage", 
                                       foreground="gray")
        self.progress_label.pack(anchor="w")
        
        # √âtapes de l'analyse
        steps_frame = ttk.Frame(progress_frame)
        steps_frame.pack(fill="x", pady=10)
        
        ttk.Label(steps_frame, text="√âtapes d'analyse:", font=("Arial", 10, "bold")).pack(anchor="w")
        
        self.steps_frame = ttk.Frame(steps_frame)
        self.steps_frame.pack(fill="x", pady=5)
        
        # Cr√©er les √©tapes
        self.analysis_steps = [
            "üîç Scan des fichiers du projet",
            "üìã Analyse des langages d√©tect√©s", 
            "ü§ñ Configuration des agents IA",
            "üìö G√©n√©ration de la documentation",
            "üîß Analyse du code et am√©liorations",
            "üîí Scan de s√©curit√©",
            "üì± Cr√©ation du contenu social",
            "‚úÖ Finalisation et rapport"
        ]
        
        self.step_labels = []
        for i, step in enumerate(self.analysis_steps):
            step_label = ttk.Label(self.steps_frame, text=f"‚è≥ {step}", foreground="gray")
            step_label.pack(anchor="w", pady=2)
            self.step_labels.append(step_label)
    
    def create_metrics_section(self):
        """Cr√©e la section des m√©triques et statistiques"""
        metrics_frame = ttk.LabelFrame(self.results_scrollable_frame, 
                                      text="üìà M√©triques de l'analyse", padding=15)
        metrics_frame.pack(fill="x", padx=20, pady=10)
        
        # Grille de m√©triques 2x3
        metrics_grid = ttk.Frame(metrics_frame)
        metrics_grid.pack(fill="x")
        
        # M√©triques de base
        self.metrics_widgets = {}
        metrics_data = [
            ("üìÅ Fichiers analys√©s", "0", 0, 0),
            ("üíª Lignes de code", "0", 0, 1),
            ("üåê Langages d√©tect√©s", "0", 1, 0),
            ("ü§ñ Agents actifs", "0", 1, 1),
            ("üìÑ Fichiers g√©n√©r√©s", "0", 2, 0),
            ("‚è±Ô∏è Temps d'analyse", "0s", 2, 1)
        ]
        
        for label, value, row, col in metrics_data:
            metric_frame = ttk.Frame(metrics_grid)
            metric_frame.grid(row=row, column=col, padx=15, pady=8, sticky="w")
            
            ttk.Label(metric_frame, text=label, font=("Arial", 9)).pack(anchor="w")
            value_label = ttk.Label(metric_frame, text=value, font=("Arial", 12, "bold"), 
                                   foreground="#2563eb")
            value_label.pack(anchor="w")
            
            self.metrics_widgets[label] = value_label
        
        # Configurer les colonnes
        metrics_grid.columnconfigure(0, weight=1)
        metrics_grid.columnconfigure(1, weight=1)
    
    def create_results_navigation(self):
        """Cr√©e la navigation entre les r√©sultats des √©quipes"""
        nav_frame = ttk.LabelFrame(self.results_scrollable_frame, 
                                  text="üóÇÔ∏è Navigation des r√©sultats", padding=15)
        nav_frame.pack(fill="x", padx=20, pady=10)
        
        # Boutons de navigation par √©quipe
        nav_buttons_frame = ttk.Frame(nav_frame)
        nav_buttons_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(nav_buttons_frame, text="Voir les r√©sultats par √©quipe:", 
                 font=("Arial", 10, "bold")).pack(anchor="w", pady=(0, 8))
        
        buttons_container = ttk.Frame(nav_buttons_frame)
        buttons_container.pack(fill="x")
        
        self.nav_buttons = {}
        nav_categories = [
            ("üìö", "Documentation", "#3b82f6"),
            ("üîß", "Code Improvement", "#10b981"),
            ("üîí", "Security", "#ef4444"),
            ("üì±", "Social Content", "#8b5cf6")
        ]
        
        for icon, category, color in nav_categories:
            btn = ttk.Button(buttons_container, text=f"{icon} {category}",
                           command=lambda cat=category: self.show_category_results(cat))
            btn.pack(side="left", padx=(0, 10))
            self.nav_buttons[category] = btn
        
        # Zone d'affichage des r√©sultats de la cat√©gorie s√©lectionn√©e
        self.category_results_frame = ttk.Frame(nav_frame)
        self.category_results_frame.pack(fill="both", expand=True, pady=10)
        
        # Placeholder initial
        self.category_placeholder = ttk.Label(self.category_results_frame, 
                                             text="S√©lectionnez une √©quipe pour voir ses r√©sultats",
                                             foreground="gray", font=("Arial", 10))
        self.category_placeholder.pack(pady=20)
    
    def create_generated_files_section(self):
        """Cr√©e la section des fichiers g√©n√©r√©s"""
        files_frame = ttk.LabelFrame(self.results_scrollable_frame, 
                                    text="üìÑ Fichiers g√©n√©r√©s", padding=15)
        files_frame.pack(fill="x", padx=20, pady=10)
        
        # Liste des fichiers avec aper√ßu
        files_container = ttk.Frame(files_frame)
        files_container.pack(fill="both", expand=True)
        
        # En-t√™te
        header_files = ttk.Frame(files_container)
        header_files.pack(fill="x", pady=(0, 10))
        
        ttk.Label(header_files, text="Fichiers cr√©√©s et modifi√©s:", 
                 font=("Arial", 10, "bold")).pack(anchor="w")
        ttk.Label(header_files, text="Cliquez sur un fichier pour pr√©visualiser son contenu",
                 foreground="gray", font=("Arial", 9)).pack(anchor="w")
        
        # Zone scrollable pour la liste des fichiers
        files_scroll_frame = ttk.Frame(files_container)
        files_scroll_frame.pack(fill="both", expand=True)
        
        # Listbox avec scrollbar pour les fichiers
        files_list_frame = ttk.Frame(files_scroll_frame)
        files_list_frame.pack(fill="both", expand=True)
        
        files_scrollbar = ttk.Scrollbar(files_list_frame)
        files_scrollbar.pack(side="right", fill="y")
        
        self.files_listbox = tk.Listbox(files_list_frame, height=6, 
                                       yscrollcommand=files_scrollbar.set,
                                       font=("Consolas", 9))
        self.files_listbox.pack(side="left", fill="both", expand=True)
        files_scrollbar.config(command=self.files_listbox.yview)
        
        self.files_listbox.bind("<Double-Button-1>", self.preview_generated_file)
        
        # Zone de pr√©visualisation
        preview_frame = ttk.Frame(files_container)
        preview_frame.pack(fill="both", expand=True, pady=(10, 0))
        
        ttk.Label(preview_frame, text="Aper√ßu du fichier s√©lectionn√©:", 
                 font=("Arial", 10, "bold")).pack(anchor="w")
        
        preview_scroll = ttk.Scrollbar(preview_frame)
        preview_scroll.pack(side="right", fill="y")
        
        self.file_preview = tk.Text(preview_frame, height=8, state="disabled",
                                   yscrollcommand=preview_scroll.set,
                                   font=("Consolas", 8), bg="#f8f9fa")
        self.file_preview.pack(side="left", fill="both", expand=True)
        preview_scroll.config(command=self.file_preview.yview)
    
    def create_results_actions(self):
        """Cr√©e les boutons d'action pour les r√©sultats"""
        actions_frame = ttk.Frame(self.results_scrollable_frame)
        actions_frame.pack(fill="x", padx=20, pady=20)
        
        # Boutons principaux
        ttk.Button(actions_frame, text="üì• T√©l√©charger tous les fichiers",
                  command=self.demo_download_files).pack(side="left", padx=(0, 10))
        
        ttk.Button(actions_frame, text="üîÑ Relancer l'analyse",
                  command=self.demo_restart_analysis).pack(side="left", padx=(0, 10))
        
        ttk.Button(actions_frame, text="üìä Rapport complet",
                  command=self.demo_show_full_report).pack(side="left", padx=(0, 10))
        
        # Bouton pour passer √† l'am√©lioration
        ttk.Button(actions_frame, text="‚û°Ô∏è Aller √† l'am√©lioration",
                  command=lambda: self.notebook.select(2)).pack(side="right")
    
    def demo_browse_folder(self):
        """D√©monstration: S√©lection de dossier"""
        folder = filedialog.askdirectory(title="S√©lectionner le dossier du projet (d√©monstration)")
        if folder:
            self.project_path.set(folder)
            self.path_label.configure(foreground="black")
            messagebox.showinfo("D√©monstration", 
                               f"üé≠ Mode d√©monstration\n\n"
                               f"Dossier s√©lectionn√©: {os.path.basename(folder)}\n\n"
                               f"Dans la vraie application, LazyRepo analyserait ce dossier.")
    
    def demo_detect_languages(self):
        """D√©monstration: D√©tection des langages"""
        if self.project_path.get() == "Aucun dossier s√©lectionn√©":
            # S√©lection al√©atoire pour la d√©mo
            num_langs = random.randint(2, 6)
            selected_langs = random.sample(self.all_languages[:-1], num_langs)
            
            # Reset et s√©lection
            for var in self.languages_vars.values():
                var.set(False)
            for lang in selected_langs:
                self.languages_vars[lang].set(True)
            
            messagebox.showinfo("D√©monstration - Mode al√©atoire", 
                               f"üé≠ Mode d√©monstration\n\n"
                               f"Langages d√©tect√©s (simulation): {', '.join(selected_langs)}\n\n"
                               f"S√©lectionnez un dossier pour une vraie analyse.")
        else:
            # Simulation avec dossier
            demo_langs = ["Python", "JavaScript", "HTML", "CSS"]
            for var in self.languages_vars.values():
                var.set(False)
            for lang in demo_langs:
                if lang in self.languages_vars:
                    self.languages_vars[lang].set(True)
            
            messagebox.showinfo("D√©monstration", 
                               f"üé≠ Mode d√©monstration\n\n"
                               f"Langages d√©tect√©s: {', '.join(demo_langs)}\n\n"
                               f"Dans la vraie application, LazyRepo analyserait le code source.")
    
    def demo_start_analysis(self):
        """D√©monstration: Lancement de l'analyse"""
        selected_crews = self.options_manager.get_selected_crews()
        selected_langs = [lang for lang, var in self.languages_vars.items() if var.get()]
        
        # V√©rifier les s√©lections
        has_crews = any(any(agents.values()) for agents in selected_crews.values())
        
        if not has_crews:
            response = messagebox.askyesno("Mode d√©monstration", 
                                         "Aucune √©quipe n'est activ√©e.\n\n"
                                         "Voulez-vous activer automatiquement des √©quipes "
                                         "pour la d√©monstration ?")
            if response:
                self.demo_random_crew_selection()
        
        if not selected_langs:
            response = messagebox.askyesno("Mode d√©monstration", 
                                         "Aucun langage n'est s√©lectionn√©.\n\n"
                                         "Voulez-vous s√©lectionner automatiquement des langages "
                                         "pour la d√©monstration ?")
            if response:
                self.demo_detect_languages()
        
        # Message de lancement
        messagebox.showinfo("Analyse LazyRepo", 
                           f"üé≠ Mode d√©monstration\n\n"
                           f"Projet: {self.project_name.get()}\n"
                           f"√âquipes: {len([c for c in selected_crews.keys()])}\n"
                           f"Langages: {len(selected_langs)}\n\n"
                           f"Dans la vraie application, l'analyse d√©marrerait maintenant !\n"
                           f"L'onglet R√©sultats s'activerait automatiquement.")
        
        # D√©marrer la simulation d'analyse (PROMPT 3)
        self.start_demo_analysis()
    
    def demo_show_config(self):
        """D√©monstration: Affichage de la configuration"""
        selected_crews = self.options_manager.get_selected_crews()
        selected_langs = [lang for lang, var in self.languages_vars.items() if var.get()]
        
        config_text = [f"Configuration LazyRepo - {self.project_name.get()}"]
        config_text.append(f"Dossier: {self.project_path.get()}")
        config_text.append(f"Langages: {', '.join(selected_langs) if selected_langs else 'Aucun'}")
        config_text.append("")
        config_text.append("√âquipes activ√©es:")
        
        for crew_name, agents in selected_crews.items():
            active_agents = [name for name, active in agents.items() if active]
            if active_agents:
                config_text.append(f"\n{crew_name}:")
                for agent in active_agents:
                    config_text.append(f"  ‚Ä¢ {agent}")
            else:
                config_text.append(f"\n{crew_name}: Aucun agent activ√©")
        
        messagebox.showinfo("Configuration LazyRepo", "\n".join(config_text))
    
    def demo_random_crew_selection(self):
        """S√©lection al√©atoire d'√©quipes pour la d√©mo"""
        for crew_name, crew_data in self.options_manager.categories.items():
            # S√©lectionner al√©atoirement 1-3 agents
            num_agents = random.randint(1, 3)
            agents_list = list(crew_data['agents'].keys())
            selected_agents = random.sample(agents_list, min(num_agents, len(agents_list)))
            
            # Reset puis activation
            for var in crew_data['agents'].values():
                var.set(False)
            for agent in selected_agents:
                crew_data['agents'][agent].set(True)
    
    # ============ NOUVELLES FONCTIONNALIT√âS CHAT IA (PROMPT 2) ============
    
    def add_ai_message(self, sender, message):
        """Ajoute un message de l'IA au chat avec timestamps et couleurs"""
        self.chat_display.config(state="normal")
        
        # Ajouter timestamp
        timestamp = datetime.datetime.now().strftime("%H:%M")
        
        # Ajouter le message
        if sender == "ü§ñ Assistant IA":
            self.chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "ai_sender")
            self.chat_display.insert(tk.END, f"{message}\n\n", "ai_message")
        else:
            self.chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "user_sender")
            self.chat_display.insert(tk.END, f"{message}\n\n", "user_message")
        
        # Configurer les tags pour le style
        self.chat_display.tag_configure("ai_sender", foreground="#2563eb", font=("Arial", 9, "bold"))
        self.chat_display.tag_configure("ai_message", foreground="#1f2937")
        self.chat_display.tag_configure("user_sender", foreground="#059669", font=("Arial", 9, "bold"))
        self.chat_display.tag_configure("user_message", foreground="#374151")
        
        self.chat_display.config(state="disabled")
        self.chat_display.see(tk.END)  # Scroll vers le bas
    
    def send_chat_message(self, event=None):
        """Envoie un message dans le chat"""
        message = self.chat_entry.get().strip()
        if not message:
            return
        
        # Ajouter le message de l'utilisateur
        self.add_ai_message("üë§ Vous", message)
        self.chat_entry.delete(0, tk.END)
        
        # G√©n√©rer la r√©ponse de l'IA avec d√©lai
        self.root.after(500, lambda: self.generate_ai_response(message))
    
    def notify_ai_selection_change(self, crew_name, has_selection):
        """Notifie l'IA des changements de s√©lection avec cooldown anti-spam"""
        if self.ai_notification_cooldown:
            return
        
        # Activer le cooldown pour √©viter le spam
        self.ai_notification_cooldown = True
        self.root.after(3000, lambda: setattr(self, 'ai_notification_cooldown', False))
        
        # Messages de r√©action de l'IA
        if has_selection:
            reactions = [
                f"üëç Excellent ! Vous avez activ√© {crew_name}. Cette √©quipe va faire du super travail !",
                f"üéØ Parfait ! {crew_name} est un excellent choix pour votre projet.",
                f"‚ú® Super s√©lection avec {crew_name} ! Voulez-vous que je vous pose des questions sp√©cifiques ?"
            ]
        else:
            reactions = [
                f"ü§î Vous avez d√©sactiv√© {crew_name}. Si vous changez d'avis, elle reste disponible !",
                f"üëå {crew_name} d√©sactiv√©e. Concentrons-nous sur vos autres √©quipes alors !"
            ]
        
        # Ajouter le message avec un d√©lai pour que ce soit naturel
        self.root.after(1000, lambda: self.add_ai_message("ü§ñ Assistant IA", random.choice(reactions)))
    
    def generate_ai_response(self, user_message):
        """G√©n√®re une r√©ponse intelligente de l'IA bas√©e sur le contexte"""
        user_message_lower = user_message.lower()
        
        # Obtenir le contexte actuel
        selected_crews = self.get_selected_crews_summary()
        selected_languages = self.get_selected_languages()
        project_name = self.project_name.get()
        has_project_folder = self.project_path.get() != "Aucun dossier s√©lectionn√©"
        
        # Commandes sp√©ciales
        if "aide" in user_message_lower or "help" in user_message_lower:
            response = ("üÜò Voici ce que je peux faire :\n\n"
                       "‚Ä¢ üìä Analyser vos s√©lections d'√©quipes\n"
                       "‚Ä¢ üîç Sugg√©rer des optimisations\n"
                       "‚Ä¢ ‚ùì Poser des questions personnalis√©es\n"
                       "‚Ä¢ üí° Donner des conseils selon votre projet\n\n"
                       "Tapez 'suggestions' pour des recommandations !")
        
        elif "suggestion" in user_message_lower or "conseil" in user_message_lower:
            response = self.generate_suggestions(selected_crews, selected_languages, has_project_folder)
        
        elif "question" in user_message_lower:
            response = self.generate_contextual_questions(selected_crews, selected_languages)
        
        # R√©ponses contextuelles bas√©es sur les s√©lections
        elif selected_crews and not self.ai_questions_asked:
            response = self.generate_contextual_questions(selected_crews, selected_languages)
        
        # R√©ponses g√©n√©riques intelligentes
        elif any(word in user_message_lower for word in ["merci", "ok", "oui", "non"]):
            responses = [
                "Parfait ! Y a-t-il autre chose que vous aimeriez personnaliser ?",
                "Excellent ! Souhaitez-vous que je vous pose des questions plus sp√©cifiques ?",
                "Super ! Tapez 'suggestions' pour des recommandations personnalis√©es."
            ]
            response = random.choice(responses)
        
        elif any(word in user_message_lower for word in ["python", "javascript", "java", "code"]):
            if selected_languages:
                lang_text = ", ".join(selected_languages[:3])
                response = (f"Excellent choix avec {lang_text} ! üêç\n\n"
                           f"Pour ces langages, je recommande particuli√®rement :\n"
                           f"‚Ä¢ üìö Documentation automatique des APIs\n"
                           f"‚Ä¢ üîí Scan de s√©curit√© approfondi\n"
                           f"‚Ä¢ üîß Optimisation des performances\n\n"
                           f"Avez-vous des frameworks sp√©cifiques en t√™te ?")
            else:
                response = ("Les langages que vous mentionnez sont excellents ! üíª\n\n"
                           "N'h√©sitez pas √† les s√©lectionner dans la section ci-dessus, "
                           "je pourrai alors vous donner des conseils plus pr√©cis !")
        
        else:
            # R√©ponses par d√©faut intelligentes
            default_responses = [
                f"Int√©ressant ! Pour votre projet '{project_name}', cela pourrait √™tre tr√®s utile. ü§î",
                "Je vois ! Cela m'aide √† mieux comprendre vos besoins. Continuez √† me parler de votre projet ! üí°",
                "Merci pour cette information ! Cela m'aidera √† personnaliser mes recommandations. üéØ",
                "Parfait ! Ces d√©tails sont pr√©cieux pour optimiser l'analyse LazyRepo. üöÄ"
            ]
            response = random.choice(default_responses)
            
            # Ajouter une suggestion contextuelle
            if selected_crews:
                response += f"\n\nAu fait, avec vos √©quipes actuelles ({len(selected_crews)} activ√©es), voulez-vous que je vous pose des questions plus sp√©cifiques ?"
        
        self.add_ai_message("ü§ñ Assistant IA", response)
    
    def get_selected_crews_summary(self):
        """Retourne un r√©sum√© des √©quipes s√©lectionn√©es"""
        selected_crews = self.options_manager.get_selected_crews()
        active_crews = []
        
        for crew, agents in selected_crews.items():
            active_agents = [agent for agent, active in agents.items() if active]
            if active_agents:
                active_crews.append({
                    'name': crew,
                    'agents': active_agents,
                    'count': len(active_agents)
                })
        
        return active_crews
    
    def get_selected_languages(self):
        """Retourne la liste des langages s√©lectionn√©s"""
        return [lang for lang, var in self.languages_vars.items() if var.get()]
    
    def generate_suggestions(self, selected_crews, selected_languages, has_project_folder):
        """G√©n√®re des suggestions personnalis√©es"""
        if not selected_crews and not selected_languages:
            return ("üéØ Recommandations pour d√©buter :\n\n"
                   "1. Commencez par s√©lectionner l'√©quipe üìö Documentation\n"
                   "2. Ajoutez votre langage principal\n"
                   "3. Si c'est un projet web, activez üîí Security\n\n"
                   "üí° Pour une d√©monstration compl√®te, essayez le bouton 'Analyser le projet' !")
        
        suggestions = ["üéØ Suggestions personnalis√©es :\n"]
        
        if selected_languages:
            lang_count = len(selected_languages)
            if lang_count == 1:
                suggestions.append(f"‚Ä¢ Excellent focus sur {selected_languages[0]} ! Consid√©rez ajouter les tests automatiques.")
            elif lang_count > 5:
                suggestions.append(f"‚Ä¢ {lang_count} langages d√©tect√©s ! L'√©quipe Code Improvement sera tr√®s utile.")
            else:
                suggestions.append(f"‚Ä¢ Belle stack multi-langages ({lang_count} langages). Parfait pour une analyse compl√®te !")
        
        if selected_crews:
            crew_names = [crew['name'] for crew in selected_crews]
            if "üìö Documentation" in str(crew_names) and "üì± Social Content" in str(crew_names):
                suggestions.append("‚Ä¢ Combinaison Documentation + Social parfaite pour l'open source ! üåü")
            
            if "üîí Security" in str(crew_names):
                suggestions.append("‚Ä¢ Excellent choix avec Security ! Pensez aux variables d'environnement.")
        
        if not has_project_folder:
            suggestions.append("‚Ä¢ üí° Conseil : S√©lectionnez un dossier pour une analyse r√©elle, ou utilisez le mode d√©mo !")
        
        suggestions.append("\n‚ùì Voulez-vous que je vous pose des questions plus sp√©cifiques ?")
        
        return "\n".join(suggestions)
    
    def generate_contextual_questions(self, selected_crews, selected_languages):
        """G√©n√®re des questions contextuelles bas√©es sur les s√©lections"""
        if not selected_crews:
            return ("ü§î Questions pour vous aider :\n\n"
                   "‚Ä¢ Quel est l'objectif principal de votre projet ?\n"
                   "‚Ä¢ S'agit-il d'un projet open source ou priv√© ?\n"
                   "‚Ä¢ Avez-vous une √©quipe de d√©veloppement ?\n\n"
                   "Ces informations m'aideront √† recommander les bonnes √©quipes !")
        
        questions = []
        crew_names = [crew['name'] for crew in selected_crews]
        
        # Questions sp√©cifiques selon les √©quipes s√©lectionn√©es
        if any("Documentation" in name for name in crew_names):
            if "doc_target" not in self.ai_questions_asked:
                questions.append("üìö Documentation : Votre documentation cible-t-elle les d√©veloppeurs ou les utilisateurs finaux ?")
                self.ai_questions_asked.add("doc_target")
        
        if any("Security" in name for name in crew_names):
            if "security_level" not in self.ai_questions_asked:
                questions.append("üîí S√©curit√© : Votre projet manipule-t-il des donn√©es sensibles ou des APIs externes ?")
                self.ai_questions_asked.add("security_level")
        
        if any("Social" in name for name in crew_names):
            if "social_platform" not in self.ai_questions_asked:
                questions.append("üì± Social : Sur quelles plateformes souhaitez-vous promouvoir votre projet ?")
                self.ai_questions_asked.add("social_platform")
        
        if any("Improvement" in name for name in crew_names):
            if "code_style" not in self.ai_questions_asked:
                questions.append("üîß Code : Avez-vous des standards de code sp√©cifiques ou des conventions d'√©quipe ?")
                self.ai_questions_asked.add("code_style")
        
        # Questions sur les langages
        if selected_languages and "language_framework" not in self.ai_questions_asked:
            main_lang = selected_languages[0]
            questions.append(f"üíª {main_lang} : Utilisez-vous des frameworks sp√©cifiques (React, Django, Spring...) ?")
            self.ai_questions_asked.add("language_framework")
        
        if not questions:
            # Questions g√©n√©rales si toutes les sp√©cifiques ont √©t√© pos√©es
            general_questions = [
                "üéØ Quel est le public cible principal de votre projet ?",
                "‚è∞ Avez-vous des contraintes de d√©lai particuli√®res ?",
                "üîÑ S'agit-il d'un projet en maintenance ou en d√©veloppement actif ?",
                "üåç Le projet sera-t-il d√©ploy√© internationalement ?"
            ]
            questions.append(random.choice(general_questions))
        
        if questions:
            return f"ü§î Question personnalis√©e :\n\n{questions[0]}\n\nüí° Vos r√©ponses m'aident √† optimiser la configuration LazyRepo !"
        else:
            return ("‚úÖ Excellente configuration ! Vous semblez avoir tout couvert.\n\n"
                   "üöÄ Pr√™t √† lancer l'analyse ? Ou avez-vous d'autres questions ?")
    
    # ============ NOUVELLES FONCTIONNALIT√âS R√âSULTATS (PROMPT 3) ============
    
    def start_demo_analysis(self):
        """D√©marre la simulation d'analyse LazyRepo"""
        if self.analysis_running:
            return
        
        self.analysis_running = True
        self.analysis_progress = 0
        
        # Activer l'onglet R√©sultats et y basculer
        self.notebook.tab(1, state="normal")
        self.notebook.select(1)
        
        # Initialiser les informations du projet
        selected_crews = self.get_selected_crews_summary()
        selected_languages = self.get_selected_languages()
        
        project_info = f"Projet: {self.project_name.get()} | "
        project_info += f"√âquipes: {len(selected_crews)} | "
        project_info += f"Langages: {len(selected_languages)}"
        
        self.project_info_label.config(text=project_info, foreground="black")
        
        # G√©n√©rer des m√©triques de d√©monstration
        self.generate_demo_metrics()
        
        # D√©marrer l'animation de progression
        self.animate_analysis_progress()
    
    def generate_demo_metrics(self):
        """G√©n√®re des m√©triques de d√©monstration r√©alistes"""
        selected_languages = self.get_selected_languages()
        selected_crews = self.get_selected_crews_summary()
        
        # M√©triques bas√©es sur les s√©lections
        base_files = random.randint(15, 45)
        lines_multiplier = {"Python": 150, "JavaScript": 120, "Java": 200, "C++": 180}
        
        total_lines = 0
        for lang in selected_languages:
            multiplier = lines_multiplier.get(lang, 100)
            total_lines += random.randint(50, 300) * multiplier // 100
        
        if not total_lines:  # Si aucun langage s√©lectionn√©
            total_lines = random.randint(500, 2000)
        
        self.demo_metrics = {
            "üìÅ Fichiers analys√©s": base_files + len(selected_languages) * 3,
            "üíª Lignes de code": total_lines,
            "üåê Langages d√©tect√©s": len(selected_languages) if selected_languages else random.randint(2, 4),
            "ü§ñ Agents actifs": sum(crew['count'] for crew in selected_crews),
            "üìÑ Fichiers g√©n√©r√©s": len(selected_crews) * 3 + random.randint(2, 6),
            "‚è±Ô∏è Temps d'analyse": "Calcul en cours..."
        }
        
        # G√©n√©rer la liste des fichiers
        self.generate_demo_files()
    
    def generate_demo_files(self):
        """G√©n√®re une liste de fichiers de d√©monstration"""
        self.generated_files = []
        
        # Fichiers de base toujours pr√©sents
        base_files = [
            ("README.md", "üìö Documentation", "# Mon Projet\n\nDescription automatique g√©n√©r√©e par LazyRepo...\n\n## Installation\n\n```bash\npip install -r requirements.txt\n```"),
            (".gitignore", "üîí Security", "# LazyRepo - Configuration s√©curis√©e\n__pycache__/\n*.pyc\n.env\n*.log\nvenv/"),
            ("SECURITY.md", "üîí Security", "# Politique de S√©curit√©\n\n## Signalement de vuln√©rabilit√©s\n\nCe document a √©t√© g√©n√©r√© automatiquement..."),
        ]
        
        # Fichiers selon les √©quipes s√©lectionn√©es
        selected_crews = self.get_selected_crews_summary()
        
        for crew in selected_crews:
            if "Documentation" in crew['name']:
                base_files.extend([
                    ("docs/API.md", "üìö Documentation", "# Documentation API\n\n## Endpoints\n\n### GET /api/status\nRetourne le statut de l'application..."),
                    ("docs/INSTALL.md", "üìö Documentation", "# Guide d'Installation\n\n## Pr√©requis\n\n- Python 3.8+\n- Git\n...")
                ])
            
            if "Security" in crew['name']:
                base_files.extend([
                    (".env.example", "üîí Security", "# Variables d'environnement\nDATABASE_URL=\nSECRET_KEY=\nAPI_KEY="),
                    ("docker-compose.yml", "üîí Security", "version: '3.8'\nservices:\n  app:\n    build: .\n    environment:\n      - NODE_ENV=production")
                ])
            
            if "Social" in crew['name']:
                base_files.extend([
                    ("SOCIAL_POSTS.md", "üì± Social Content", "# Posts LinkedIn\n\n## Post 1 - Annonce du projet\n\nüöÄ Fier de pr√©senter mon nouveau projet..."),
                    ("PRESS_KIT.md", "üì± Social Content", "# Kit Presse\n\n## Description courte\n\nNotre projet r√©volutionne...")
                ])
            
            if "Improvement" in crew['name']:
                base_files.extend([
                    ("CODE_REVIEW.md", "üîß Code Improvement", "# Analyse du Code\n\n## Suggestions d'am√©lioration\n\n- Ajouter des docstrings..."),
                    ("REFACTORING.md", "üîß Code Improvement", "# Plan de Refactoring\n\n## Optimisations propos√©es\n\n1. Extraction de m√©thodes...")
                ])
        
        # Ajouter quelques fichiers de langages sp√©cifiques
        selected_languages = self.get_selected_languages()
        for lang in selected_languages[:3]:  # Limiter √† 3 pour l'exemple
            if lang == "Python":
                base_files.append(("requirements.txt", "üîß Code Improvement", "# D√©pendances Python\nflask==2.0.1\nrequests==2.25.1\npandas==1.3.0"))
            elif lang == "JavaScript":
                base_files.append(("package.json", "üîß Code Improvement", '{\n  "name": "mon-projet",\n  "version": "1.0.0",\n  "dependencies": {\n    "express": "^4.17.1"\n  }\n}'))
            elif lang == "Java":
                base_files.append(("pom.xml", "üîß Code Improvement", '<?xml version="1.0"?>\n<project>\n  <groupId>com.example</groupId>\n  <artifactId>mon-projet</artifactId>\n</project>'))
        
        self.generated_files = base_files[:self.demo_metrics.get("üìÑ Fichiers g√©n√©r√©s", 8)]
    
    def animate_analysis_progress(self):
        """Anime la progression de l'analyse"""
        if not self.analysis_running:
            return
        
        # Incr√©menter la progression
        self.analysis_progress = min(self.analysis_progress + random.randint(3, 8), 100)
        
        # Mettre √† jour la barre de progression
        self.progress_bar['value'] = self.analysis_progress
        
        # Mettre √† jour le label de progression
        if self.analysis_progress < 100:
            current_step = min(len(self.analysis_steps) - 1, self.analysis_progress // 12)
            self.progress_label.config(text=f"{self.analysis_progress}% - {self.analysis_steps[current_step]}")
            
            # Mettre √† jour les √©tapes
            for i, label in enumerate(self.step_labels):
                if i < current_step:
                    label.config(text=f"‚úÖ {self.analysis_steps[i]}", foreground="green")
                elif i == current_step:
                    label.config(text=f"üîÑ {self.analysis_steps[i]}", foreground="orange")
                else:
                    label.config(text=f"‚è≥ {self.analysis_steps[i]}", foreground="gray")
            
            # Mettre √† jour les m√©triques progressivement
            self.update_metrics_animation()
            
            # Continuer l'animation
            self.root.after(random.randint(200, 600), self.animate_analysis_progress)
        else:
            # Analyse termin√©e
            self.finish_analysis()
    
    def update_metrics_animation(self):
        """Met √† jour les m√©triques pendant l'animation"""
        progress_ratio = self.analysis_progress / 100
        
        for metric, final_value in self.demo_metrics.items():
            if metric == "‚è±Ô∏è Temps d'analyse":
                elapsed = int(self.analysis_progress * 0.5)  # Simulation du temps
                self.metrics_widgets[metric].config(text=f"{elapsed}s")
            elif isinstance(final_value, int):
                current_value = int(final_value * progress_ratio)
                if metric == "üíª Lignes de code":
                    self.metrics_widgets[metric].config(text=f"{current_value:,}")
                else:
                    self.metrics_widgets[metric].config(text=str(current_value))
        
        # Remplir progressivement la liste des fichiers
        files_to_show = int(len(self.generated_files) * progress_ratio)
        self.files_listbox.delete(0, tk.END)
        for i in range(files_to_show):
            if i < len(self.generated_files):
                filename, category, _ = self.generated_files[i]
                self.files_listbox.insert(tk.END, f"üìÑ {filename} ({category})")
    
    def finish_analysis(self):
        """Finalise l'analyse et affiche les r√©sultats complets"""
        self.analysis_running = False
        self.progress_label.config(text="100% - ‚úÖ Analyse termin√©e avec succ√®s!", foreground="green")
        
        # Marquer toutes les √©tapes comme termin√©es
        for i, label in enumerate(self.step_labels):
            label.config(text=f"‚úÖ {self.analysis_steps[i]}", foreground="green")
        
        # Finaliser les m√©triques
        total_time = random.randint(15, 45)
        self.demo_metrics["‚è±Ô∏è Temps d'analyse"] = f"{total_time}s"
        self.metrics_widgets["‚è±Ô∏è Temps d'analyse"].config(text=f"{total_time}s")
        
        # Afficher tous les fichiers
        self.files_listbox.delete(0, tk.END)
        for filename, category, _ in self.generated_files:
            self.files_listbox.insert(tk.END, f"üìÑ {filename} ({category})")
        
        # Message de fin
        messagebox.showinfo("Analyse termin√©e", 
                           "üéâ Analyse LazyRepo termin√©e avec succ√®s !\n\n"
                           f"‚úÖ {len(self.generated_files)} fichiers g√©n√©r√©s\n"
                           f"‚è±Ô∏è Temps total: {total_time}s\n"
                           f"ü§ñ {sum(crew['count'] for crew in self.get_selected_crews_summary())} agents utilis√©s\n\n"
                           "Explorez les r√©sultats par √©quipe et consultez les fichiers g√©n√©r√©s !")
    
    def show_category_results(self, category):
        """Affiche les r√©sultats d'une cat√©gorie sp√©cifique"""
        self.current_result_category = category
        
        # Nettoyer l'affichage pr√©c√©dent
        for widget in self.category_results_frame.winfo_children():
            widget.destroy()
        
        # Cr√©er l'affichage pour la cat√©gorie
        category_header = ttk.Frame(self.category_results_frame)
        category_header.pack(fill="x", pady=(0, 10))
        
        # Titre de la cat√©gorie
        icons = {"Documentation": "üìö", "Code Improvement": "üîß", 
                "Security": "üîí", "Social Content": "üì±"}
        icon = icons.get(category, "üìã")
        
        ttk.Label(category_header, text=f"{icon} R√©sultats - {category}", 
                 font=("Arial", 14, "bold")).pack(anchor="w")
        
        # Filtrer les fichiers de cette cat√©gorie
        category_files = [f for f in self.generated_files if f[1] == f"{icon} {category}"]
        
        if category_files:
            ttk.Label(category_header, text=f"üìÑ {len(category_files)} fichier(s) g√©n√©r√©(s)", 
                     foreground="green").pack(anchor="w")
            
            # Liste des fichiers de la cat√©gorie
            files_frame = ttk.Frame(self.category_results_frame)
            files_frame.pack(fill="both", expand=True)
            
            for filename, _, content_preview in category_files:
                file_item = ttk.Frame(files_frame)
                file_item.pack(fill="x", pady=5)
                
                file_btn = ttk.Button(file_item, text=f"üìÑ {filename}",
                                     command=lambda f=filename, c=content_preview: self.show_file_details(f, c))
                file_btn.pack(side="left")
                
                size_label = ttk.Label(file_item, text=f"({len(content_preview)} caract√®res)", 
                                      foreground="gray", font=("Arial", 8))
                size_label.pack(side="left", padx=(10, 0))
        else:
            ttk.Label(category_header, text="Aucun fichier g√©n√©r√© pour cette cat√©gorie", 
                     foreground="gray").pack(anchor="w", pady=20)
    
    def show_file_details(self, filename, content):
        """Affiche les d√©tails d'un fichier dans une nouvelle fen√™tre"""
        detail_window = tk.Toplevel(self.root)
        detail_window.title(f"LazyRepo - Aper√ßu de {filename}")
        detail_window.geometry("600x400")
        
        # En-t√™te
        header_frame = ttk.Frame(detail_window)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        ttk.Label(header_frame, text=f"üìÑ {filename}", 
                 font=("Arial", 14, "bold")).pack(anchor="w")
        ttk.Label(header_frame, text="Contenu g√©n√©r√© par LazyRepo (d√©monstration)", 
                 foreground="gray").pack(anchor="w")
        
        # Contenu
        content_frame = ttk.Frame(detail_window)
        content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # Zone de texte avec scrollbar
        text_scrollbar = ttk.Scrollbar(content_frame)
        text_scrollbar.pack(side="right", fill="y")
        
        content_text = tk.Text(content_frame, yscrollcommand=text_scrollbar.set,
                              font=("Consolas", 9), wrap=tk.WORD)
        content_text.pack(side="left", fill="both", expand=True)
        text_scrollbar.config(command=content_text.yview)
        
        content_text.insert("1.0", content)
        content_text.config(state="disabled")
        
        # Boutons
        buttons_frame = ttk.Frame(detail_window)
        buttons_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üíæ Sauvegarder (d√©mo)", 
                  command=lambda: self.demo_save_file(filename)).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="‚úèÔ∏è √âditer (d√©mo)", 
                  command=lambda: self.demo_edit_file(filename)).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå Fermer", 
                  command=detail_window.destroy).pack(side="right")
    
    def preview_generated_file(self, event=None):
        """Pr√©visualise un fichier s√©lectionn√© dans la listbox"""
        selection = self.files_listbox.curselection()
        if not selection:
            return
        
        selected_item = self.files_listbox.get(selection[0])
        # Extraire le nom du fichier (supprimer les emojis et cat√©gorie)
        filename = selected_item.split("üìÑ ")[1].split(" (")[0]
        
        # Trouver le contenu correspondant
        for file_info in self.generated_files:
            if file_info[0] == filename:
                content = file_info[2]
                
                # Afficher dans la zone de pr√©visualisation
                self.file_preview.config(state="normal")
                self.file_preview.delete("1.0", tk.END)
                self.file_preview.insert("1.0", f"=== {filename} ===\n\n{content}")
                self.file_preview.config(state="disabled")
                break
    
    def demo_download_files(self):
        """D√©monstration: T√©l√©chargement des fichiers"""
        messagebox.showinfo("T√©l√©chargement", 
                           f"üé≠ Mode d√©monstration\n\n"
                           f"T√©l√©chargement de {len(self.generated_files)} fichiers...\n\n"
                           f"Dans la vraie application, les fichiers seraient sauvegard√©s "
                           f"dans le dossier de votre projet.")
    
    def demo_restart_analysis(self):
        """D√©monstration: Relance de l'analyse"""
        response = messagebox.askyesno("Relancer l'analyse", 
                                      "Voulez-vous vraiment relancer l'analyse ?\n\n"
                                      "‚ö†Ô∏è Cela r√©initialisera tous les r√©sultats actuels.")
        if response:
            # R√©initialiser les variables
            self.analysis_progress = 0
            self.analysis_running = False
            self.progress_bar['value'] = 0
            self.progress_label.config(text="0% - En attente de d√©marrage", foreground="gray")
            
            # Nettoyer les fichiers
            self.files_listbox.delete(0, tk.END)
            self.file_preview.config(state="normal")
            self.file_preview.delete("1.0", tk.END)
            self.file_preview.config(state="disabled")
            
            # Relancer
            self.start_demo_analysis()
    
    def demo_show_full_report(self):
        """D√©monstration: Affichage du rapport complet"""
        selected_crews = self.get_selected_crews_summary()
        selected_languages = self.get_selected_languages()
        
        report_lines = [
            "üìä RAPPORT COMPLET D'ANALYSE LAZYREPO",
            "=" * 50,
            "",
            f"üéØ Projet: {self.project_name.get()}",
            f"üìÅ Dossier: {self.project_path.get()}",
            f"üìÖ Date: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}",
            "",
            "üìà M√âTRIQUES:",
        ]
        
        for metric, value in self.demo_metrics.items():
            report_lines.append(f"  {metric}: {value}")
        
        report_lines.extend([
            "",
            "ü§ñ √âQUIPES UTILIS√âES:",
        ])
        
        for crew in selected_crews:
            report_lines.append(f"  {crew['name']}: {crew['count']} agent(s)")
        
        report_lines.extend([
            "",
            "üíª LANGAGES ANALYS√âS:",
            f"  {', '.join(selected_languages) if selected_languages else 'Aucun langage sp√©cifique'}",
            "",
            "üìÑ FICHIERS G√âN√âR√âS:",
        ])
        
        for filename, category, _ in self.generated_files:
            report_lines.append(f"  üìÑ {filename} ({category})")
        
        # Afficher dans une nouvelle fen√™tre
        report_window = tk.Toplevel(self.root)
        report_window.title("LazyRepo - Rapport Complet")
        report_window.geometry("700x500")
        
        # Zone de texte avec scrollbar
        text_frame = ttk.Frame(report_window)
        text_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        scrollbar = ttk.Scrollbar(text_frame)
        scrollbar.pack(side="right", fill="y")
        
        report_text = tk.Text(text_frame, yscrollcommand=scrollbar.set,
                             font=("Consolas", 9), wrap=tk.WORD)
        report_text.pack(side="left", fill="both", expand=True)
        scrollbar.config(command=report_text.yview)
        
        report_text.insert("1.0", "\n".join(report_lines))
        report_text.config(state="disabled")
        
        # Bouton de fermeture
        ttk.Button(report_window, text="‚ùå Fermer", 
                  command=report_window.destroy).pack(pady=10)
    
    def demo_save_file(self, filename):
        """D√©monstration: Sauvegarde d'un fichier"""
        messagebox.showinfo("Sauvegarde", 
                           f"üé≠ Mode d√©monstration\n\n"
                           f"Fichier '{filename}' sauvegard√© !\n\n"
                           f"Dans la vraie application, le fichier serait "
                           f"√©crit dans votre projet.")
    
    def demo_edit_file(self, filename):
        """D√©monstration: √âdition d'un fichier"""
        messagebox.showinfo("√âdition", 
                           f"üé≠ Mode d√©monstration\n\n"
                           f"Ouverture de '{filename}' dans l'√©diteur...\n\n"
                           f"Dans la vraie application, le fichier s'ouvrirait "
                           f"dans votre √©diteur pr√©f√©r√©.")
    
    # ============ NOUVELLES FONCTIONNALIT√âS AM√âLIORATION (PROMPT 4) ============
    
    def demo_scan_project(self):
        """D√©monstration: Scanner tout le projet"""
        messagebox.showinfo("Scanner", 
                           "üîç Scan du projet en cours...\n\n"
                           "Analysing des fichiers de code source...")
        
        # Simuler un d√©lai de scan
        self.root.after(1000, self.populate_demo_files)
    
    def populate_demo_files(self):
        """Remplit la liste avec des fichiers de d√©monstration"""
        # Vider la liste actuelle
        for item in self.files_tree.get_children():
            self.files_tree.delete(item)
        
        # G√©n√©rer des fichiers de d√©monstration r√©alistes
        demo_files = [
            ("main.py", "Python", "2.3 KB", "Il y a 2h", "‚úÖ Analys√©"),
            ("app.js", "JavaScript", "5.7 KB", "Il y a 1h", "‚ö†Ô∏è Am√©liorable"),
            ("style.css", "CSS", "1.8 KB", "Il y a 3h", "‚úÖ Analys√©"),
            ("index.html", "HTML", "3.2 KB", "Il y a 4h", "üîç En cours"),
            ("config.json", "JSON", "892 B", "Il y a 1j", "‚úÖ Analys√©"),
            ("utils.py", "Python", "4.1 KB", "Il y a 30m", "‚ö†Ô∏è Am√©liorable"),
            ("README.md", "Markdown", "1.5 KB", "Il y a 2j", "üìù √Ä documenter"),
            ("database.py", "Python", "8.4 KB", "Il y a 1h", "üîí S√©curit√© √† v√©rifier"),
            ("components.js", "JavaScript", "6.2 KB", "Il y a 45m", "‚ö° Performance"),
            ("test_main.py", "Python", "3.8 KB", "Il y a 1j", "üß™ Tests OK"),
        ]
        
        # Ajouter les fichiers au Treeview
        for i, (nom, type_file, taille, modif, statut) in enumerate(demo_files):
            # Ajouter une ic√¥ne selon le type
            if type_file == "Python":
                display_nom = f"üêç {nom}"
            elif type_file == "JavaScript":
                display_nom = f"üü® {nom}"
            elif type_file == "CSS":
                display_nom = f"üé® {nom}"
            elif type_file == "HTML":
                display_nom = f"üåê {nom}"
            elif type_file == "JSON":
                display_nom = f"üìã {nom}"
            elif type_file == "Markdown":
                display_nom = f"üìù {nom}"
            else:
                display_nom = f"üìÑ {nom}"
            
            self.files_tree.insert("", "end", values=(display_nom, type_file, taille, modif, statut))
        
        # Mettre √† jour le compteur
        self.files_count_label.config(text=f"{len(demo_files)} fichier(s)", foreground="green")
        
        # Stocker pour les filtres
        self.scanned_files = demo_files
        
        messagebox.showinfo("Scan termin√©", 
                           f"‚úÖ Scan termin√© avec succ√®s !\n\n"
                           f"üìÅ {len(demo_files)} fichiers analys√©s\n"
                           f"‚ö†Ô∏è {len([f for f in demo_files if 'Am√©liorable' in f[4]])} fichiers n√©cessitent des am√©liorations\n"
                           f"üîí {len([f for f in demo_files if 'S√©curit√©' in f[4]])} fichiers n√©cessitent une v√©rification s√©curit√©")
    
    def demo_scan_specific_files(self):
        """D√©monstration: Scanner des fichiers sp√©cifiques"""
        files = filedialog.askopenfilenames(
            title="S√©lectionner les fichiers √† analyser",
            filetypes=[
                ("Fichiers Python", "*.py"),
                ("Fichiers JavaScript", "*.js"),
                ("Fichiers HTML", "*.html"),
                ("Fichiers CSS", "*.css"),
                ("Tous les fichiers", "*.*")
            ]
        )
        
        if files:
            messagebox.showinfo("Scan sp√©cifique", 
                               f"üé≠ Mode d√©monstration\n\n"
                               f"Analyse de {len(files)} fichier(s) s√©lectionn√©(s)...\n\n"
                               f"Dans la vraie application, ces fichiers seraient analys√©s individuellement.")
            
            # Simuler l'ajout de fichiers sp√©cifiques
            self.root.after(500, self.populate_demo_files)
    
    def demo_refresh_scan(self):
        """D√©monstration: Actualiser le scan"""
        messagebox.showinfo("Actualisation", 
                           "üîÑ Actualisation du scan...\n\n"
                           "Recherche de nouveaux fichiers et mises √† jour...")
        
        self.root.after(800, self.populate_demo_files)
    
    def apply_file_filters(self, event=None):
        """Applique les filtres sur la liste des fichiers"""
        if not hasattr(self, 'scanned_files') or not self.scanned_files:
            return
        
        # Vider la liste actuelle
        for item in self.files_tree.get_children():
            self.files_tree.delete(item)
        
        # Appliquer les filtres
        file_type_filter = self.file_type_filter.get()
        size_filter = self.size_filter.get()
        
        filtered_files = []
        for nom, type_file, taille, modif, statut in self.scanned_files:
            # Filtre par type
            if file_type_filter != "Tous":
                if file_type_filter.startswith(type_file):
                    pass  # Le fichier passe le filtre
                else:
                    continue  # Le fichier ne passe pas le filtre
            
            # Filtre par taille (simulation simple)
            if size_filter != "Toutes":
                # Dans une vraie app, on comparerait la vraie taille
                pass  # Simulation : tous les fichiers passent
            
            filtered_files.append((nom, type_file, taille, modif, statut))
        
        # R√©afficher les fichiers filtr√©s
        for nom, type_file, taille, modif, statut in filtered_files:
            # Ajouter une ic√¥ne selon le type
            if type_file == "Python":
                display_nom = f"üêç {nom}"
            elif type_file == "JavaScript":
                display_nom = f"üü® {nom}"
            elif type_file == "CSS":
                display_nom = f"üé® {nom}"
            elif type_file == "HTML":
                display_nom = f"üåê {nom}"
            elif type_file == "JSON":
                display_nom = f"üìã {nom}"
            elif type_file == "Markdown":
                display_nom = f"üìù {nom}"
            else:
                display_nom = f"üìÑ {nom}"
            
            self.files_tree.insert("", "end", values=(display_nom, type_file, taille, modif, statut))
        
        # Mettre √† jour le compteur
        self.files_count_label.config(text=f"{len(filtered_files)} fichier(s)", 
                                     foreground="green" if filtered_files else "gray")
    
    def on_file_double_click(self, event):
        """Gestion du double-clic sur un fichier"""
        selection = self.files_tree.selection()
        if not selection:
            return
        
        item = self.files_tree.item(selection[0])
        values = item['values']
        filename = values[0].split(' ', 1)[1] if ' ' in values[0] else values[0]  # Enlever l'emoji
        
        # Ouvrir le d√©tail du fichier
        self.show_file_improvement_details(filename, values)
    
    def show_file_context_menu(self, event):
        """Affiche le menu contextuel pour un fichier"""
        selection = self.files_tree.selection()
        if not selection:
            return
        
        # Cr√©er le menu contextuel
        context_menu = tk.Menu(self.root, tearoff=0)
        context_menu.add_command(label="üìù Analyser ce fichier", 
                               command=lambda: self.analyze_single_file(selection[0]))
        context_menu.add_command(label="‚ö° Actions rapides", 
                               command=lambda: self.quick_actions_for_file(selection[0]))
        context_menu.add_separator()
        context_menu.add_command(label="üëÅÔ∏è Voir d√©tails", 
                               command=lambda: self.on_file_double_click(event))
        context_menu.add_command(label="üîÑ Actualiser statut", 
                               command=lambda: self.refresh_file_status(selection[0]))
        
        # Afficher le menu
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
    
    def select_all_files(self):
        """S√©lectionne tous les fichiers"""
        self.files_tree.selection_set(self.files_tree.get_children())
        self.update_selected_files_label()
    
    def deselect_all_files(self):
        """D√©s√©lectionne tous les fichiers"""
        self.files_tree.selection_remove(self.files_tree.get_children())
        self.update_selected_files_label()
    
    def update_selected_files_label(self):
        """Met √† jour le label des fichiers s√©lectionn√©s"""
        selected = self.files_tree.selection()
        count = len(selected)
        
        if count == 0:
            self.selected_files_label.config(text="Aucun fichier s√©lectionn√©", foreground="gray")
        elif count == 1:
            self.selected_files_label.config(text="1 fichier s√©lectionn√©", foreground="blue")
        else:
            self.selected_files_label.config(text=f"{count} fichiers s√©lectionn√©s", foreground="blue")
    
    def demo_quick_action(self, action_type):
        """D√©monstration: Ex√©cute une action rapide"""
        selected = self.files_tree.selection()
        
        if not selected:
            messagebox.showwarning("Aucune s√©lection", 
                                 "Veuillez s√©lectionner au moins un fichier dans la liste.")
            return
        
        action_names = {
            "comments": "Ajout de commentaires",
            "security": "S√©curisation des secrets",
            "docstrings": "G√©n√©ration de docstrings",
            "format": "Formatage du code",
            "bugs": "D√©tection de bugs",
            "optimize": "Optimisation des performances",
            "tests": "G√©n√©ration de tests",
            "complexity": "Analyse de complexit√©",
            "refactor": "Refactoring"
        }
        
        action_name = action_names.get(action_type, "Action inconnue")
        file_count = len(selected)
        
        # Simuler l'action
        messagebox.showinfo("Action en cours", 
                           f"üîÑ {action_name} en cours...\n\n"
                           f"üìÅ {file_count} fichier(s) trait√©(s)\n"
                           f"‚è±Ô∏è Estimation: {file_count * 2}s")
        
        # Simuler la completion avec d√©lai
        self.root.after(1500, lambda: self.complete_quick_action(action_type, file_count))
    
    def complete_quick_action(self, action_type, file_count):
        """Compl√®te l'action rapide"""
        action_results = {
            "comments": f"‚úÖ {file_count * 15} commentaires ajout√©s",
            "security": f"üîí {file_count * 3} secrets s√©curis√©s",
            "docstrings": f"üìö {file_count * 8} docstrings g√©n√©r√©es",
            "format": f"üé® {file_count} fichiers format√©s",
            "bugs": f"üêõ {file_count * 2} bugs potentiels d√©tect√©s",
            "optimize": f"‚ö° {file_count * 5} optimisations sugg√©r√©es",
            "tests": f"üß™ {file_count * 4} tests g√©n√©r√©s",
            "complexity": f"üìä Complexit√© analys√©e pour {file_count} fichiers",
            "refactor": f"üîÑ {file_count * 6} suggestions de refactoring"
        }
        
        result = action_results.get(action_type, "Action termin√©e")
        
        messagebox.showinfo("Action termin√©e", 
                           f"üéâ Action termin√©e avec succ√®s !\n\n"
                           f"{result}\n\n"
                           f"Consultez l'historique des modifications pour plus de d√©tails.")
        
        # Ajouter √† l'historique
        timestamp = datetime.datetime.now().strftime("%H:%M")
        modification_entry = f"[{timestamp}] {result}"
        
        # Vider le placeholder si c'est la premi√®re modification
        if self.modifications_listbox.size() == 1 and "Aucune modification" in self.modifications_listbox.get(0):
            self.modifications_listbox.delete(0)
            self.modifications_listbox.config(foreground="black")
        
        self.modifications_listbox.insert(0, modification_entry)
        
        # Limiter l'historique √† 20 entr√©es
        if self.modifications_listbox.size() > 20:
            self.modifications_listbox.delete(20, tk.END)
    
    # ============ INT√âGRATION IA GLOBALE ET NOTIFICATIONS CROSS-ONGLETS (PROMPT 5) ============
    
    def setup_global_ai_integration(self):
        """Configure l'int√©gration IA globale entre tous les onglets"""
        # Initialiser le contexte global de l'IA
        self.global_ai_context = {
            "current_project": {
                "name": "",
                "path": "",
                "languages": [],
                "crews": [],
                "complexity_score": 0
            },
            "user_behavior": {
                "preferred_crews": [],
                "common_languages": [],
                "interaction_patterns": [],
                "workflow_preferences": ""
            },
            "session_data": {
                "start_time": datetime.datetime.now(),
                "actions_count": 0,
                "questions_asked": 0,
                "improvements_applied": 0
            }
        }
        
        # Cr√©er une barre de notifications globale
        self.create_global_notification_bar()
    
    def create_global_notification_bar(self):
        """Cr√©e une barre de notifications en haut de l'interface"""
        # Frame pour les notifications au-dessus du notebook
        self.notifications_frame = ttk.Frame(self.root)
        self.notifications_frame.pack(fill="x", padx=10, pady=(10, 0))
        
        # Notification active (initialement cach√©e)
        self.active_notification_frame = ttk.Frame(self.notifications_frame)
        
        # Ic√¥ne de notification
        self.notification_icon = ttk.Label(self.active_notification_frame, text="üîî", 
                                          font=("Arial", 12))
        self.notification_icon.pack(side="left", padx=(5, 10))
        
        # Texte de notification
        self.notification_text = ttk.Label(self.active_notification_frame, text="", 
                                          font=("Arial", 10), foreground="#1f2937")
        self.notification_text.pack(side="left", fill="x", expand=True)
        
        # Boutons d'action de notification
        self.notification_actions_frame = ttk.Frame(self.active_notification_frame)
        self.notification_actions_frame.pack(side="right", padx=10)
        
        # Bouton fermer notification
        self.close_notification_btn = ttk.Button(self.notification_actions_frame, text="‚úï", 
                                                 command=self.hide_notification, width=3)
        self.close_notification_btn.pack(side="right")
    
    def setup_cross_tab_notifications(self):
        """Configure le syst√®me de notifications entre onglets"""
        # Types de notifications inter-onglets
        self.notification_types = {
            "config_to_results": {
                "trigger": "analysis_started",
                "message": "üí° Suggestion : Une fois l'analyse termin√©e, consultez l'onglet Am√©lioration pour optimiser vos fichiers !",
                "action": "Aller √† Am√©lioration",
                "target_tab": 2
            },
            "results_to_improvement": {
                "trigger": "results_complete",
                "message": "üîß Recommandation : Vos r√©sultats sont pr√™ts ! Passez √† l'onglet Am√©lioration pour scanner et optimiser vos fichiers.",
                "action": "Scanner maintenant",
                "target_tab": 2
            },
            "improvement_to_config": {
                "trigger": "files_improved",
                "message": "üîÑ Id√©e : Apr√®s vos am√©liorations, vous pourriez relancer une analyse avec de nouvelles √©quipes !",
                "action": "Reconfigurer",
                "target_tab": 0
            },
            "smart_suggestion": {
                "trigger": "context_change",
                "message": "",  # Dynamique
                "action": "Voir d√©tails",
                "target_tab": -1  # Variable
            }
        }
        
        # Queue des notifications en attente
        self.notification_queue = []
        self.current_notification = None
    
    def on_tab_changed(self, event):
        """G√®re les changements d'onglets et l'apprentissage IA"""
        selected_tab = self.notebook.index(self.notebook.select())
        tab_names = ["configuration", "results", "improvement"]
        
        if selected_tab < len(tab_names):
            previous_stage = self.workflow_stage
            self.workflow_stage = tab_names[selected_tab]
            
            # Mettre √† jour le contexte global
            self.update_global_ai_context()
            
            # G√©n√©rer des recommandations intelligentes
            self.generate_smart_recommendations(previous_stage, self.workflow_stage)
            
            # D√©clencher des notifications contextuelles
            self.trigger_contextual_notifications(selected_tab)
    
    def update_global_ai_context(self):
        """Met √† jour le contexte global de l'IA"""
        # Mettre √† jour les informations du projet
        self.global_ai_context["current_project"].update({
            "name": self.project_name.get(),
            "path": self.project_path.get(),
            "languages": self.get_selected_languages(),
            "crews": [crew['name'] for crew in self.get_selected_crews_summary()]
        })
        
        # Analyser les pr√©f√©rences utilisateur
        selected_crews = self.get_selected_crews_summary()
        if selected_crews:
            crew_types = [crew['name'] for crew in selected_crews]
            self.global_ai_context["user_behavior"]["preferred_crews"] = crew_types
            
            # Calculer un score de complexit√© du projet
            complexity_factors = {
                "crew_count": len(selected_crews),
                "language_count": len(self.get_selected_languages()),
                "has_security": any("Security" in crew for crew in crew_types),
                "has_documentation": any("Documentation" in crew for crew in crew_types)
            }
            
            complexity_score = (
                complexity_factors["crew_count"] * 2 +
                complexity_factors["language_count"] * 1.5 +
                (5 if complexity_factors["has_security"] else 0) +
                (3 if complexity_factors["has_documentation"] else 0)
            )
            
            self.global_ai_context["current_project"]["complexity_score"] = complexity_score
        
        # Incr√©menter le compteur d'actions
        self.global_ai_context["session_data"]["actions_count"] += 1
    
    def generate_smart_recommendations(self, previous_stage, current_stage):
        """G√©n√®re des recommandations intelligentes bas√©es sur le contexte"""
        recommendations = []
        context = self.global_ai_context
        
        # Recommandations bas√©es sur la transition entre onglets
        if previous_stage == "configuration" and current_stage == "results":
            if not self.analysis_running and self.analysis_progress == 0:
                recommendations.append({
                    "type": "workflow_guidance",
                    "priority": "high",
                    "title": "Analyse non d√©marr√©e",
                    "message": "Vous consultez les r√©sultats sans avoir lanc√© d'analyse. Retournez √† la configuration pour d√©marrer !",
                    "action": "Lancer l'analyse",
                    "callback": lambda: self.notebook.select(0)
                })
        
        elif previous_stage == "results" and current_stage == "improvement":
            if hasattr(self, 'generated_files') and self.generated_files:
                recommendations.append({
                    "type": "cross_reference",
                    "priority": "medium",
                    "title": "Fichiers d√©tect√©s",
                    "message": f"Votre analyse a g√©n√©r√© {len(self.generated_files)} fichiers. Scannez-les pour des am√©liorations !",
                    "action": "Scanner les fichiers",
                    "callback": self.demo_scan_project
                })
        
        elif current_stage == "improvement":
            if not hasattr(self, 'scanned_files') or not self.scanned_files:
                recommendations.append({
                    "type": "action_needed",
                    "priority": "medium",
                    "title": "Scanner recommand√©",
                    "message": "Commencez par scanner vos fichiers pour obtenir des suggestions d'am√©lioration personnalis√©es.",
                    "action": "Scanner maintenant",
                    "callback": self.demo_scan_project
                })
        
        # Recommandations bas√©es sur la complexit√© du projet
        complexity = context["current_project"]["complexity_score"]
        languages = context["current_project"]["languages"]
        
        if complexity > 15 and current_stage == "configuration":
            recommendations.append({
                "type": "complexity_warning",
                "priority": "medium",
                "title": "Projet complexe d√©tect√©",
                "message": f"Votre projet semble complexe ({len(languages)} langages). Consid√©rez activer l'√©quipe Security.",
                "action": "Activer Security",
                "callback": lambda: self.activate_security_crew()
            })
        
        # Recommandations bas√©es sur l'historique
        session_time = (datetime.datetime.now() - context["session_data"]["start_time"]).total_seconds()
        if session_time > 300 and context["session_data"]["actions_count"] < 3:  # 5 minutes, peu d'actions
            recommendations.append({
                "type": "engagement",
                "priority": "low",
                "title": "Exploration sugg√©r√©e",
                "message": "Vous explorez LazyRepo depuis un moment. Voulez-vous essayer une d√©monstration compl√®te ?",
                "action": "D√©mo auto",
                "callback": self.start_auto_demo
            })
        
        # Ajouter les nouvelles recommandations
        for rec in recommendations:
            if rec not in self.smart_recommendations:
                self.smart_recommendations.append(rec)
        
        # Afficher la recommandation la plus prioritaire
        if recommendations:
            self.show_smart_recommendation(recommendations[0])
    
    def show_smart_recommendation(self, recommendation):
        """Affiche une recommandation intelligente"""
        priority_colors = {
            "high": "#ef4444",
            "medium": "#f59e0b", 
            "low": "#6b7280"
        }
        
        priority_icons = {
            "high": "‚ö†Ô∏è",
            "medium": "üí°",
            "low": "‚ÑπÔ∏è"
        }
        
        icon = priority_icons.get(recommendation["priority"], "üí°")
        color = priority_colors.get(recommendation["priority"], "#6b7280")
        
        # Cr√©er une notification personnalis√©e
        notification_text = f"{icon} {recommendation['title']}: {recommendation['message']}"
        
        self.show_notification(
            notification_text,
            recommendation["action"],
            recommendation["callback"],
            bg_color=color
        )
    
    def show_notification(self, message, action_text=None, action_callback=None, bg_color="#3b82f6", duration=10000):
        """Affiche une notification avec actions optionnelles"""
        # Cacher la notification pr√©c√©dente
        self.hide_notification()
        
        # Configurer la nouvelle notification
        self.notification_text.config(text=message)
        self.notification_icon.config(foreground=bg_color)
        
        # Ajouter bouton d'action si fourni
        if action_text and action_callback:
            action_btn = ttk.Button(self.notification_actions_frame, text=action_text,
                                   command=lambda: self.execute_notification_action(action_callback))
            action_btn.pack(side="left", padx=(0, 5))
            self.current_action_btn = action_btn
        
        # Afficher la notification
        self.active_notification_frame.pack(fill="x", pady=(0, 5))
        self.active_notification_frame.configure(relief="solid", borderwidth=1)
        
        # Auto-hide apr√®s duration
        if duration > 0:
            self.root.after(duration, self.hide_notification)
        
        self.current_notification = {
            "message": message,
            "action": action_text,
            "callback": action_callback
        }
    
    def hide_notification(self):
        """Cache la notification active"""
        self.active_notification_frame.pack_forget()
        
        # Nettoyer le bouton d'action
        if hasattr(self, 'current_action_btn'):
            self.current_action_btn.destroy()
            delattr(self, 'current_action_btn')
        
        self.current_notification = None
    
    def execute_notification_action(self, callback):
        """Ex√©cute l'action d'une notification"""
        self.hide_notification()
        if callback:
            try:
                callback()
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'ex√©cution de l'action: {str(e)}")
    
    def trigger_contextual_notifications(self, tab_index):
        """D√©clenche des notifications contextuelles selon l'onglet"""
        context = self.global_ai_context
        
        if tab_index == 0:  # Onglet Configuration
            self.check_configuration_suggestions()
        elif tab_index == 1:  # Onglet R√©sultats
            self.check_results_suggestions()
        elif tab_index == 2:  # Onglet Am√©lioration
            self.check_improvement_suggestions()
    
    def check_configuration_suggestions(self):
        """V√©rifications et suggestions pour l'onglet Configuration"""
        selected_crews = self.get_selected_crews_summary()
        selected_languages = self.get_selected_languages()
        
        # Suggestion si aucune √©quipe s√©lectionn√©e
        if not selected_crews:
            self.show_notification(
                "üéØ Conseil : S√©lectionnez au moins une √©quipe pour commencer votre analyse LazyRepo !",
                "Voir les √©quipes",
                lambda: self.scroll_to_crews_section()
            )
        
        # Suggestion pour projets multi-langages
        elif len(selected_languages) > 3 and not any("Security" in crew['name'] for crew in selected_crews):
            self.show_notification(
                "üîí Recommandation : Projet multi-langages d√©tect√©. L'√©quipe Security est recommand√©e !",
                "Activer Security",
                self.activate_security_crew
            )
        
        # Suggestion pour l'am√©lioration de code
        elif selected_crews and not any("Improvement" in crew['name'] for crew in selected_crews):
            self.show_notification(
                "‚ö° Id√©e : Ajoutez l'√©quipe Code Improvement pour des suggestions d'optimisation !",
                "Activer Improvement",
                self.activate_improvement_crew
            )
    
    def check_results_suggestions(self):
        """V√©rifications et suggestions pour l'onglet R√©sultats"""
        if not self.analysis_running and self.analysis_progress == 0:
            self.show_notification(
                "üìä Info : Aucune analyse en cours. Retournez √† la configuration pour d√©marrer !",
                "Configurer",
                lambda: self.notebook.select(0)
            )
        
        elif self.analysis_progress == 100:
            if hasattr(self, 'generated_files') and len(self.generated_files) > 5:
                self.show_notification(
                    f"üéâ Analyse termin√©e ! {len(self.generated_files)} fichiers g√©n√©r√©s. Passez √† l'am√©lioration pour les optimiser !",
                    "Am√©liorer",
                    lambda: self.notebook.select(2)
                )
    
    def check_improvement_suggestions(self):
        """V√©rifications et suggestions pour l'onglet Am√©lioration"""
        has_scanned = hasattr(self, 'scanned_files') and self.scanned_files
        
        if not has_scanned:
            self.show_notification(
                "üîç Conseil : Commencez par scanner vos fichiers pour obtenir des suggestions personnalis√©es !",
                "Scanner",
                self.demo_scan_project
            )
        
        elif has_scanned and len(self.scanned_files) > 0:
            problematic_files = len([f for f in self.scanned_files if "Am√©liorable" in f[4] or "S√©curit√©" in f[4]])
            if problematic_files > 0:
                self.show_notification(
                    f"‚ö†Ô∏è {problematic_files} fichier(s) n√©cessitent des am√©liorations. Utilisez les actions rapides !",
                    "Actions rapides",
                    lambda: self.scroll_to_quick_actions()
                )
    
    def scroll_to_crews_section(self):
        """Scroll vers la section des √©quipes"""
        self.config_canvas.yview_moveto(0.3)  # Approximativement vers les crews
    
    def scroll_to_quick_actions(self):
        """Scroll vers les actions rapides"""
        self.improvement_canvas.yview_moveto(0.4)  # Approximativement vers les actions
    
    def activate_security_crew(self):
        """Active automatiquement l'√©quipe Security"""
        for crew_name, crew_data in self.options_manager.categories.items():
            if "Security" in crew_name:
                # Activer quelques agents de s√©curit√©
                security_agents = list(crew_data['agents'].keys())[:2]  # Prendre 2 agents
                for agent_name in security_agents:
                    crew_data['agents'][agent_name].set(True)
                
                self.show_notification(
                    "‚úÖ √âquipe Security activ√©e ! 2 agents de s√©curit√© configur√©s.",
                    duration=3000
                )
                break
    
    def activate_improvement_crew(self):
        """Active automatiquement l'√©quipe Code Improvement"""
        for crew_name, crew_data in self.options_manager.categories.items():
            if "Code Improvement" in crew_name:
                # Activer tous les agents d'am√©lioration
                for var in crew_data['agents'].values():
                    var.set(True)
                
                self.show_notification(
                    "‚úÖ √âquipe Code Improvement activ√©e ! Tous les agents configur√©s.",
                    duration=3000
                )
                break
    
    def start_auto_demo(self):
        """D√©marre une d√©monstration automatique"""
        self.show_notification(
            "üöÄ D√©monstration automatique d√©marr√©e ! Suivez le guide...",
            duration=3000
        )
        
        # S√©quence de d√©monstration
        self.root.after(2000, self.auto_demo_step_1)
    
    def auto_demo_step_1(self):
        """√âtape 1 : S√©lection automatique des langages"""
        self.demo_detect_languages()
        self.show_notification("1Ô∏è‚É£ Langages d√©tect√©s automatiquement !", duration=2000)
        self.root.after(3000, self.auto_demo_step_2)
    
    def auto_demo_step_2(self):
        """√âtape 2 : Activation des √©quipes"""
        self.demo_random_crew_selection()
        self.show_notification("2Ô∏è‚É£ √âquipes configur√©es automatiquement !", duration=2000)
        self.root.after(3000, self.auto_demo_step_3)
    
    def auto_demo_step_3(self):
        """√âtape 3 : Lancement de l'analyse"""
        self.demo_start_analysis()
        self.show_notification("3Ô∏è‚É£ Analyse lanc√©e ! Consultez les r√©sultats...", duration=3000)
    
    def create_ai_summary_widget(self):
        """Cr√©e un widget de r√©sum√© IA flottant"""
        # Cr√©er une fen√™tre flottante pour le r√©sum√©
        self.ai_summary_window = tk.Toplevel(self.root)
        self.ai_summary_window.title("Assistant IA - R√©sum√© du Projet")
        self.ai_summary_window.geometry("350x500")
        self.ai_summary_window.attributes('-topmost', True)
        
        # Positionner en haut √† droite
        self.ai_summary_window.geometry("+{}+{}".format(
            self.root.winfo_x() + self.root.winfo_width() - 350,
            self.root.winfo_y()
        ))
        
        # Contenu du r√©sum√©
        summary_frame = ttk.Frame(self.ai_summary_window)
        summary_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        ttk.Label(summary_frame, text="ü§ñ R√©sum√© IA en Temps R√©el", 
                 font=("Arial", 12, "bold")).pack(anchor="w", pady=(0, 10))
        
        # Zone de texte pour le r√©sum√©
        self.ai_summary_text = tk.Text(summary_frame, height=20, wrap=tk.WORD,
                                      font=("Arial", 9), state="disabled")
        self.ai_summary_text.pack(fill="both", expand=True)
        
        # Boutons de contr√¥le
        controls_frame = ttk.Frame(summary_frame)
        controls_frame.pack(fill="x", pady=(10, 0))
        
        ttk.Button(controls_frame, text="üîÑ Actualiser",
                  command=self.update_ai_summary).pack(side="left", padx=(0, 5))
        ttk.Button(controls_frame, text="‚ùå Fermer",
                  command=self.ai_summary_window.destroy).pack(side="right")
        
        # Actualiser le r√©sum√©
        self.update_ai_summary()
        
        # Auto-actualisation toutes les 30 secondes
        self.schedule_ai_summary_update()
    
    def update_ai_summary(self):
        """Met √† jour le r√©sum√© IA"""
        context = self.global_ai_context
        
        summary_lines = [
            "üìä √âTAT DU PROJET",
            "=" * 25,
            f"Nom: {context['current_project']['name']}",
            f"Complexit√©: {context['current_project']['complexity_score']}/20",
            f"Langages: {len(context['current_project']['languages'])}",
            f"√âquipes: {len(context['current_project']['crews'])}",
            "",
            "üéØ RECOMMANDATIONS IA",
            "=" * 25
        ]
        
        # Ajouter les recommandations actives
        if self.smart_recommendations:
            for i, rec in enumerate(self.smart_recommendations[-3:], 1):  # Derni√®res 3
                summary_lines.append(f"{i}. {rec['title']}")
                summary_lines.append(f"   ‚Üí {rec['message'][:50]}...")
                summary_lines.append("")
        else:
            summary_lines.append("Aucune recommandation pour le moment")
            summary_lines.append("")
        
        # Statistiques de session
        session_time = (datetime.datetime.now() - context['session_data']['start_time']).total_seconds()
        summary_lines.extend([
            "üìà STATISTIQUES SESSION",
            "=" * 25,
            f"Dur√©e: {int(session_time//60)}m {int(session_time%60)}s",
            f"Actions: {context['session_data']['actions_count']}",
            f"Questions IA: {context['session_data']['questions_asked']}",
            f"Am√©liorations: {context['session_data']['improvements_applied']}",
            "",
            "üîÑ Derni√®re mise √† jour:",
            datetime.datetime.now().strftime("%H:%M:%S")
        ])
        
        # Mettre √† jour le texte
        self.ai_summary_text.config(state="normal")
        self.ai_summary_text.delete("1.0", tk.END)
        self.ai_summary_text.insert("1.0", "\n".join(summary_lines))
        self.ai_summary_text.config(state="disabled")
    
    def schedule_ai_summary_update(self):
        """Programme la mise √† jour automatique du r√©sum√©"""
        if hasattr(self, 'ai_summary_window') and self.ai_summary_window.winfo_exists():
            self.update_ai_summary()
            self.root.after(30000, self.schedule_ai_summary_update)  # 30 secondes
    
    def enhance_existing_ai_responses(self):
        """Am√©liore les r√©ponses IA existantes avec le contexte global"""
        # Cette m√©thode sera appel√©e pour enrichir les r√©ponses des chats existants
        pass
    
    def log_ai_interaction(self, interaction_type, details):
        """Enregistre les interactions IA pour l'apprentissage"""
        interaction = {
            "timestamp": datetime.datetime.now(),
            "type": interaction_type,
            "details": details,
            "context": self.workflow_stage
        }
        
        self.global_ai_context["session_data"]["interaction_history"].append(interaction)
        
        # Incr√©menter les compteurs appropri√©s
        if interaction_type == "question":
            self.global_ai_context["session_data"]["questions_asked"] += 1
        elif interaction_type == "improvement":
            self.global_ai_context["session_data"]["improvements_applied"] += 1
    
    def add_improvement_chat_message(self, sender, message):
        """Ajoute un message au chat d'am√©lioration"""
        self.improvement_chat_display.config(state="normal")
        
        # Ajouter timestamp
        timestamp = datetime.datetime.now().strftime("%H:%M")
        
        # Ajouter le message
        if sender == "ü§ñ Assistant Am√©lioration":
            self.improvement_chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "ai_sender")
            self.improvement_chat_display.insert(tk.END, f"{message}\n\n", "ai_message")
        else:
            self.improvement_chat_display.insert(tk.END, f"[{timestamp}] {sender}:\n", "user_sender")
            self.improvement_chat_display.insert(tk.END, f"{message}\n\n", "user_message")
        
        # Configurer les tags pour le style
        self.improvement_chat_display.tag_configure("ai_sender", foreground="#dc2626", font=("Arial", 9, "bold"))
        self.improvement_chat_display.tag_configure("ai_message", foreground="#1f2937")
        self.improvement_chat_display.tag_configure("user_sender", foreground="#059669", font=("Arial", 9, "bold"))
        self.improvement_chat_display.tag_configure("user_message", foreground="#374151")
        
        self.improvement_chat_display.config(state="disabled")
        self.improvement_chat_display.see(tk.END)
    
    def send_improvement_chat_message(self, event=None):
        """Envoie un message dans le chat d'am√©lioration"""
        message = self.improvement_chat_entry.get().strip()
        if not message:
            return
        
        # Ajouter le message de l'utilisateur
        self.add_improvement_chat_message("üë§ Vous", message)
        self.improvement_chat_entry.delete(0, tk.END)
        
        # G√©n√©rer la r√©ponse de l'IA avec d√©lai
        self.root.after(600, lambda: self.generate_improvement_ai_response(message))
    
    def generate_improvement_ai_response(self, user_message):
        """G√©n√®re une r√©ponse de l'IA d'am√©lioration"""
        user_message_lower = user_message.lower()
        
        # V√©rifier s'il y a des fichiers scann√©s
        has_scanned_files = hasattr(self, 'scanned_files') and self.scanned_files
        selected_files = self.files_tree.selection()
        
        # R√©ponses sp√©cialis√©es selon le contexte
        if "aide" in user_message_lower or "help" in user_message_lower:
            response = ("üîß Assistant d'am√©lioration √† votre service !\n\n"
                       "Voici ce que je peux analyser :\n"
                       "‚Ä¢ üìä Qualit√© et complexit√© du code\n"
                       "‚Ä¢ üêõ D√©tection de bugs et probl√®mes\n"
                       "‚Ä¢ ‚ö° Optimisations de performance\n"
                       "‚Ä¢ üîí Probl√®mes de s√©curit√©\n"
                       "‚Ä¢ üìù Am√©lioration de la documentation\n"
                       "‚Ä¢ üß™ Suggestions de tests\n\n"
                       "S√©lectionnez des fichiers et posez-moi des questions sp√©cifiques !")
        
        elif "analyser" in user_message_lower or "analyse" in user_message_lower:
            if not has_scanned_files:
                response = ("üîç Aucun fichier scann√© pour le moment.\n\n"
                           "Utilisez le bouton 'üîç Scanner le projet' pour commencer l'analyse.\n"
                           "Ensuite, je pourrai analyser vos fichiers en d√©tail !")
            elif not selected_files:
                response = ("üìÅ S√©lectionnez d'abord des fichiers dans la liste ci-dessus.\n\n"
                           "Double-cliquez sur un fichier ou utilisez Ctrl+clic pour s√©lectionner plusieurs fichiers.\n"
                           "Ensuite, je pourrai vous donner des analyses d√©taill√©es !")
            else:
                file_count = len(selected_files)
                response = (f"üîç Analyse de {file_count} fichier(s) s√©lectionn√©(s)...\n\n"
                           f"üìä R√©sultats d'analyse :\n"
                           f"‚Ä¢ ‚úÖ Code globalement bien structur√©\n"
                           f"‚Ä¢ ‚ö†Ô∏è {file_count * 2} am√©liorations sugg√©r√©es\n"
                           f"‚Ä¢ üîí {file_count} point(s) de s√©curit√© √† v√©rifier\n"
                           f"‚Ä¢ üìù Documentation √† compl√©ter\n\n"
                           f"Voulez-vous des d√©tails sur un aspect sp√©cifique ?")
        
        elif any(word in user_message_lower for word in ["bug", "erreur", "probl√®me"]):
            if selected_files:
                response = ("üêõ Analyse des bugs potentiels...\n\n"
                           "Probl√®mes d√©tect√©s :\n"
                           "‚Ä¢ Variables non utilis√©es (2 occurrences)\n"
                           "‚Ä¢ Gestion d'exceptions manquante\n"
                           "‚Ä¢ Conditions toujours vraies/fausses\n"
                           "‚Ä¢ Imports redondants\n\n"
                           "üí° Voulez-vous que je g√©n√®re les corrections automatiquement ?")
            else:
                response = ("üêõ Pour d√©tecter les bugs, je dois d'abord analyser vos fichiers.\n\n"
                           "Scannez votre projet et s√©lectionnez les fichiers √† analyser.\n"
                           "Je pourrai alors d√©tecter les probl√®mes potentiels !")
        
        elif any(word in user_message_lower for word in ["performance", "optimiser", "lent"]):
            response = ("‚ö° Analyse des performances...\n\n"
                       "Optimisations sugg√©r√©es :\n"
                       "‚Ä¢ Utiliser des compr√©hensions de liste\n"
                       "‚Ä¢ Mettre en cache les calculs r√©p√©titifs\n"
                       "‚Ä¢ Optimiser les boucles imbriqu√©es\n"
                       "‚Ä¢ Utiliser des g√©n√©rateurs pour les gros datasets\n\n"
                       "üìä Impact estim√© : +25% de performance\n\n"
                       "Souhaitez-vous voir des exemples de code optimis√© ?")
        
        elif any(word in user_message_lower for word in ["s√©curit√©", "security", "vuln√©rabilit√©"]):
            response = ("üîí Analyse de s√©curit√© en cours...\n\n"
                       "Points d'attention d√©tect√©s :\n"
                       "‚Ä¢ Cl√©s API cod√©es en dur (2 fichiers)\n"
                       "‚Ä¢ Mots de passe en clair\n"
                       "‚Ä¢ Validation d'entr√©e insuffisante\n"
                       "‚Ä¢ Headers de s√©curit√© manquants\n\n"
                       "üö® Priorit√© : Migrer les secrets vers .env\n\n"
                       "Voulez-vous que je g√©n√®re les fichiers .env et .gitignore ?")
        
        elif any(word in user_message_lower for word in ["test", "unittest", "pytest"]):
            response = ("üß™ Analyse de couverture de tests...\n\n"
                       "√âtat actuel :\n"
                       "‚Ä¢ üìä Couverture : 45%\n"
                       "‚Ä¢ ‚úÖ 12 tests existants\n"
                       "‚Ä¢ ‚ùå 8 fonctions sans tests\n"
                       "‚Ä¢ üéØ Fonctions critiques : 3 non test√©es\n\n"
                       "üí° Je peux g√©n√©rer des tests automatiquement !\n\n"
                       "Quel framework pr√©f√©rez-vous : unittest ou pytest ?")
        
        elif any(word in user_message_lower for word in ["documentation", "docstring", "commentaire"]):
            response = ("üìö Analyse de la documentation...\n\n"
                       "√âtat de la documentation :\n"
                       "‚Ä¢ üìù 60% des fonctions document√©es\n"
                       "‚Ä¢ ‚ùå 15 fonctions sans docstring\n"
                       "‚Ä¢ üí° Commentaires inline : insuffisants\n"
                       "‚Ä¢ üìñ README : √† mettre √† jour\n\n"
                       "üöÄ Je peux g√©n√©rer :\n"
                       "‚Ä¢ Docstrings automatiques\n"
                       "‚Ä¢ Commentaires explicatifs\n"
                       "‚Ä¢ Documentation API\n\n"
                       "Par o√π commencer ?")
        
        else:
            # R√©ponses contextuelles par d√©faut
            if not has_scanned_files:
                response = ("üí° Commencez par scanner vos fichiers pour que je puisse vous aider !\n\n"
                           "Une fois le scan effectu√©, je pourrai :\n"
                           "‚Ä¢ Analyser la qualit√© de votre code\n"
                           "‚Ä¢ Sugg√©rer des am√©liorations\n"
                           "‚Ä¢ D√©tecter les probl√®mes potentiels\n\n"
                           "Tapez 'aide' pour voir toutes mes capacit√©s !")
            else:
                response = ("ü§î Int√©ressant ! Pouvez-vous √™tre plus sp√©cifique ?\n\n"
                           "Par exemple :\n"
                           "‚Ä¢ 'Analyser la s√©curit√©' pour un audit s√©curit√©\n"
                           "‚Ä¢ 'Optimiser les performances' pour des suggestions d'optimisation\n"
                           "‚Ä¢ 'D√©tecter les bugs' pour trouver des probl√®mes\n"
                           "‚Ä¢ 'G√©n√©rer des tests' pour la couverture de tests\n\n"
                           "Je suis l√† pour am√©liorer votre code ! üîß")
        
        self.add_improvement_chat_message("ü§ñ Assistant Am√©lioration", response)
    
    def show_file_improvement_details(self, filename, file_values):
        """Affiche les d√©tails d'am√©lioration pour un fichier"""
        detail_window = tk.Toplevel(self.root)
        detail_window.title(f"LazyRepo - Am√©lioration de {filename}")
        detail_window.geometry("800x600")
        
        # En-t√™te
        header_frame = ttk.Frame(detail_window)
        header_frame.pack(fill="x", padx=10, pady=10)
        
        ttk.Label(header_frame, text=f"üîß Analyse d'am√©lioration - {filename}", 
                 font=("Arial", 14, "bold")).pack(anchor="w")
        ttk.Label(header_frame, text=f"Type: {file_values[1]} | Taille: {file_values[2]} | Statut: {file_values[4]}", 
                 foreground="gray").pack(anchor="w")
        
        # Notebook pour organiser les analyses
        analysis_notebook = ttk.Notebook(detail_window)
        analysis_notebook.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # Onglet 1: Probl√®mes d√©tect√©s
        problems_frame = ttk.Frame(analysis_notebook)
        analysis_notebook.add(problems_frame, text="üêõ Probl√®mes")
        
        problems_text = tk.Text(problems_frame, wrap=tk.WORD, font=("Consolas", 9))
        problems_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        problems_content = """üêõ PROBL√àMES D√âTECT√âS

Ligne 23: Variable 'unused_var' d√©clar√©e mais jamais utilis√©e
    Suggestion: Supprimer la variable ou l'utiliser

Ligne 45: Exception non g√©r√©e dans la fonction process_data()
    Suggestion: Ajouter un try-catch block

Ligne 67: Condition 'if True:' toujours vraie
    Suggestion: V√©rifier la logique conditionnelle

Ligne 89: Import 'os' redondant (d√©j√† import√© ligne 3)
    Suggestion: Supprimer l'import dupliqu√©"""
        
        problems_text.insert("1.0", problems_content)
        problems_text.config(state="disabled")
        
        # Onglet 2: Optimisations
        optimizations_frame = ttk.Frame(analysis_notebook)
        analysis_notebook.add(optimizations_frame, text="‚ö° Optimisations")
        
        opt_text = tk.Text(optimizations_frame, wrap=tk.WORD, font=("Consolas", 9))
        opt_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        opt_content = """‚ö° OPTIMISATIONS SUGG√âR√âES

Performance:
- Ligne 15: Utiliser list comprehension au lieu de loop
  Avant: result = []
         for item in data:
             result.append(process(item))
  Apr√®s:  result = [process(item) for item in data]

- Ligne 34: Mettre en cache le r√©sultat de calculate_heavy()
  Impact: -50% de temps d'ex√©cution

M√©moire:
- Ligne 56: Utiliser un g√©n√©rateur pour large_dataset
  Impact: -80% d'utilisation m√©moire"""
        
        opt_text.insert("1.0", opt_content)
        opt_text.config(state="disabled")
        
        # Onglet 3: S√©curit√©
        security_frame = ttk.Frame(analysis_notebook)
        analysis_notebook.add(security_frame, text="üîí S√©curit√©")
        
        sec_text = tk.Text(security_frame, wrap=tk.WORD, font=("Consolas", 9))
        sec_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        sec_content = """üîí ANALYSE DE S√âCURIT√â

CRITIQUE:
- Ligne 12: Cl√© API expos√©e en dur
  API_KEY = "sk-1234567890abcdef"
  Solution: Utiliser une variable d'environnement

- Ligne 28: Mot de passe en clair
  PASSWORD = "admin123"
  Solution: Hacher le mot de passe

AVERTISSEMENT:
- Ligne 45: Input utilisateur non valid√©
  Solution: Ajouter une validation des entr√©es

- Ligne 62: Connexion SQL sans param√®tres
  Solution: Utiliser des requ√™tes pr√©par√©es"""
        
        sec_text.insert("1.0", sec_content)
        sec_text.config(state="disabled")
        
        # Boutons d'action
        buttons_frame = ttk.Frame(detail_window)
        buttons_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üîß Appliquer toutes les corrections", 
                  command=lambda: self.apply_all_improvements(filename)).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="üíæ Exporter le rapport", 
                  command=lambda: self.export_improvement_report(filename)).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå Fermer", 
                  command=detail_window.destroy).pack(side="right")
    
    def apply_all_improvements(self, filename):
        """Applique toutes les am√©liorations sugg√©r√©es"""
        messagebox.showinfo("Am√©liorations", 
                           f"üîß Application des am√©liorations pour {filename}...\n\n"
                           f"‚úÖ 4 probl√®mes corrig√©s\n"
                           f"‚ö° 3 optimisations appliqu√©es\n"
                           f"üîí 2 probl√®mes de s√©curit√© r√©solus\n\n"
                           f"Le fichier a √©t√© sauvegard√© avec les am√©liorations.")
        
        # Ajouter √† l'historique
        timestamp = datetime.datetime.now().strftime("%H:%M")
        modification_entry = f"[{timestamp}] ‚úÖ Am√©liorations appliqu√©es √† {filename}"
        
        if self.modifications_listbox.size() == 1 and "Aucune modification" in self.modifications_listbox.get(0):
            self.modifications_listbox.delete(0)
            self.modifications_listbox.config(foreground="black")
        
        self.modifications_listbox.insert(0, modification_entry)
    
    def export_improvement_report(self, filename):
        """Exporte le rapport d'am√©lioration"""
        messagebox.showinfo("Export", 
                           f"üìÑ Rapport d'am√©lioration export√© !\n\n"
                           f"Fichier: improvement_report_{filename}.pdf\n"
                           f"Location: ./reports/\n\n"
                           f"Le rapport contient toutes les analyses d√©taill√©es.")
    
    def clear_modifications_history(self):
        """Vide l'historique des modifications"""
        response = messagebox.askyesno("Vider l'historique", 
                                      "√ätes-vous s√ªr de vouloir vider l'historique des modifications ?\n\n"
                                      "Cette action est irr√©versible.")
        if response:
            self.modifications_listbox.delete(0, tk.END)
            self.modifications_listbox.insert(0, "üìù Aucune modification effectu√©e pour le moment")
            self.modifications_listbox.config(foreground="gray")
    
    def view_modification_details(self, event=None):
        """Affiche les d√©tails d'une modification"""
        selection = self.modifications_listbox.curselection()
        if not selection:
            return
        
        modification = self.modifications_listbox.get(selection[0])
        
        if "Aucune modification" in modification:
            return
        
        messagebox.showinfo("D√©tails de la modification", 
                           f"üìã D√©tails de la modification :\n\n"
                           f"{modification}\n\n"
                           f"Cette modification a √©t√© appliqu√©e automatiquement.\n"
                           f"Consultez les fichiers concern√©s pour voir les changements.")
    
    def analyze_single_file(self, tree_item):
        """Analyse un fichier sp√©cifique"""
        item = self.files_tree.item(tree_item)
        values = item['values']
        filename = values[0].split(' ', 1)[1] if ' ' in values[0] else values[0]
        
        messagebox.showinfo("Analyse en cours", 
                           f"üîç Analyse approfondie de {filename}...\n\n"
                           f"Cette analyse peut prendre quelques secondes.")
        
        # Simuler l'analyse avec d√©lai
        self.root.after(2000, lambda: self.show_file_improvement_details(filename, values))
    
    def quick_actions_for_file(self, tree_item):
        """Affiche les actions rapides pour un fichier"""
        item = self.files_tree.item(tree_item)
        values = item['values']
        filename = values[0].split(' ', 1)[1] if ' ' in values[0] else values[0]
        
        # Cr√©er une fen√™tre d'actions rapides
        actions_window = tk.Toplevel(self.root)
        actions_window.title(f"Actions rapides - {filename}")
        actions_window.geometry("400x300")
        
        ttk.Label(actions_window, text=f"‚ö° Actions rapides pour {filename}", 
                 font=("Arial", 12, "bold")).pack(pady=10)
        
        # Boutons d'actions sp√©cifiques au fichier
        actions = [
            ("üìù Ajouter des commentaires", "comments"),
            ("üîí S√©curiser les secrets", "security"),
            ("üé® Formater le code", "format"),
            ("üêõ D√©tecter les bugs", "bugs"),
            ("‚ö° Optimiser", "optimize"),
            ("üß™ G√©n√©rer des tests", "tests")
        ]
        
        for action_name, action_type in actions:
            ttk.Button(actions_window, text=action_name,
                      command=lambda at=action_type: self.execute_file_action(filename, at, actions_window)).pack(pady=5, padx=20, fill="x")
        
        ttk.Button(actions_window, text="‚ùå Fermer",
                  command=actions_window.destroy).pack(pady=10)
    
    def execute_file_action(self, filename, action_type, window):
        """Ex√©cute une action sur un fichier sp√©cifique"""
        window.destroy()
        
        action_names = {
            "comments": "Ajout de commentaires",
            "security": "S√©curisation",
            "format": "Formatage",
            "bugs": "D√©tection de bugs",
            "optimize": "Optimisation",
            "tests": "G√©n√©ration de tests"
        }
        
        action_name = action_names.get(action_type, "Action")
        
        messagebox.showinfo("Action en cours", 
                           f"üîÑ {action_name} pour {filename}...\n\n"
                           f"Traitement en cours...")
        
        # Simuler avec d√©lai
        self.root.after(1500, lambda: self.complete_file_action(filename, action_name))
    
    def complete_file_action(self, filename, action_name):
        """Compl√®te l'action sur le fichier"""
        messagebox.showinfo("Action termin√©e", 
                           f"‚úÖ {action_name} termin√© pour {filename} !\n\n"
                           f"Les modifications ont √©t√© appliqu√©es.")
        
        # Ajouter √† l'historique
        timestamp = datetime.datetime.now().strftime("%H:%M")
        modification_entry = f"[{timestamp}] {action_name} appliqu√© √† {filename}"
        
        if self.modifications_listbox.size() == 1 and "Aucune modification" in self.modifications_listbox.get(0):
            self.modifications_listbox.delete(0)
            self.modifications_listbox.config(foreground="black")
        
        self.modifications_listbox.insert(0, modification_entry)
    
    def refresh_file_status(self, tree_item):
        """Actualise le statut d'un fichier"""
        item = self.files_tree.item(tree_item)
        values = list(item['values'])
        filename = values[0].split(' ', 1)[1] if ' ' in values[0] else values[0]
        
        # Simuler une mise √† jour du statut
        new_statuses = ["‚úÖ Analys√©", "‚ö†Ô∏è Am√©liorable", "üîç En cours", "üîí S√©curit√© OK"]
        values[4] = random.choice(new_statuses)
        
        # Mettre √† jour l'item
        self.files_tree.item(tree_item, values=values)
        
        messagebox.showinfo("Statut actualis√©", 
                           f"üîÑ Statut de {filename} mis √† jour !\n\n"
                           f"Nouveau statut: {values[4]}")


if __name__ == "__main__":
    root = tk.Tk()
    app = LazyRepoDemo(root)
    root.mainloop()
